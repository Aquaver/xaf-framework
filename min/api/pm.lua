local a=_G._XAF;local b=type(a)=="table"and a._APPDATA or nil;local c=require("filesystem")local d={C_NAME="XAF Package Manager API",C_INSTANCE=true,C_INHERIT=true,static={}}function d:initialize()local e=nil;local f=e and e.private or{}local g=e and e.public or{}f.pathRoot="io.github.aquaver"f.pathPackage=''f.pathPackages="xaf-packages"f.pathPackageBinary="_bin"f.pathPackageConfig="_config"g.checkTable=function(self)if b[f.pathPackage]==nil then return false else return true end end;g.createTable=function(self)if b[f.pathPackage]==nil then _G._XAF._APPDATA[f.pathPackage]={}return true else return false end end;g.dropTable=function(self)if b[f.pathPackage]==nil then return false else _G._XAF._APPDATA[f.pathPackage]=nil;return true end end;g.getPackagePath=function(self,h)assert(type(h)=="string","[XAF Core] Expected STRING as argument #1")local i=c.concat('/',f.pathRoot,f.pathPackages,f.pathPackage)local j=c.concat(i,f.pathPackageBinary,h)return j end;g.getTableValue=function(self,k)assert(type(k)=="string","[XAF Core] Expected STRING as argument #1")if b[f.pathPackage]==nil then return false else return true,b[f.pathPackage][k]end end;g.setTableValue=function(self,k,l)assert(type(k)=="string","[XAF Core] Expected STRING as argument #1")if b[f.pathPackage]==nil then return false else _G._XAF._APPDATA[f.pathPackage][k]=l;return true end end;return{private=f,public=g}end;function d:extend()local m=self:initialize()local f=m.private;local g=m.public;if self.C_INHERIT==true then return{private=f,public=g}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function d:new(n)local m=self:initialize()local f=m.private;local g=m.public;assert(type(n)=="string","[XAF Core] Expected STRING as argument #1")f.pathPackage=n;if a==nil or b==nil then error("[XAF Error] Package Manager API cannot be initialized")end;if self.C_INSTANCE==true then return g else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return d
