local a=_G._XAF;local b=type(a)=="table"and a._APPDATA or nil;local c=require("filesystem")local d=require("xaf/core/xafcore"):getTableInstance()local e={C_NAME="XAF Package Manager API",C_INSTANCE=true,C_INHERIT=true,static={}}function e:initialize()local f=nil;local g=f and f.private or{}local h=f and f.public or{}g.pathRoot="io.github.aquaver"g.pathPackage=''g.pathPackages="xaf-packages"g.pathPackageBinary="_bin"g.pathPackageConfig="_config"h.checkTable=function(self)if b[g.pathPackage]==nil then return false else return true end end;h.createTable=function(self)if b[g.pathPackage]==nil then _G._XAF._APPDATA[g.pathPackage]={}return true else return false end end;h.dropTable=function(self)if b[g.pathPackage]==nil then return false else _G._XAF._APPDATA[g.pathPackage]=nil;return true end end;h.getPackagePath=function(self,i)assert(type(i)=="string","[XAF Core] Expected STRING as argument #1")local j=c.concat('/',g.pathRoot,g.pathPackages,g.pathPackage)local k=c.concat(j,g.pathPackageBinary,i)return k end;h.getPackageData=function(self,l)assert(type(l)=="string"or type(l)=="nil","[XAF Core] Expected STRING as argument #1")local m=l==nil and g.pathPackage or l;local n=c.concat('/',g.pathRoot,g.pathPackages,m,g.pathPackageConfig,"package.info")local o={}if c.exists(n)==true then o=d:loadFromFile(n)if o["package-description"]and o["package-identifier"]and o["package-index"]and o["package-owner"]and o["package-title"]and o["package-version"]and o["package-xaf"]then return o else error("[XAF Error] Invalid package configuration file - cannot read data")end else error("[XAF Error] Could not find configuration file for package '"..m.."'")end end;h.getTableValue=function(self,p)assert(type(p)=="string","[XAF Core] Expected STRING as argument #1")if b[g.pathPackage]==nil then return false else return true,b[g.pathPackage][p]end end;h.setTableValue=function(self,p,q)assert(type(p)=="string","[XAF Core] Expected STRING as argument #1")if b[g.pathPackage]==nil then return false else _G._XAF._APPDATA[g.pathPackage][p]=q;return true end end;return{private=g,public=h}end;function e:extend()local r=self:initialize()local g=r.private;local h=r.public;if self.C_INHERIT==true then return{private=g,public=h}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function e:new(s)local r=self:initialize()local g=r.private;local h=r.public;assert(type(s)=="string","[XAF Core] Expected STRING as argument #1")g.pathPackage=s;if a==nil or b==nil then error("[XAF Error] Package Manager API cannot be initialized")end;if self.C_INSTANCE==true then return h else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return e
