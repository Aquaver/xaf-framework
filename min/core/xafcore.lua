local a=require("computer")local b=require("filesystem")local c=require("term")local d=require("text")local e=require("unicode")local f={C_NAME="XAF Core",C_INSTANCE=false,C_INHERIT=false,static={CONCAT_DEFAULT=0,CONCAT_SPACE=1,CONCAT_NOSPACE=2,CONCAT_NEWLINE=3}}function f:getExecutorInstance()local g={}g.run=function(self,h,...)assert(type(h)=="function","[XAF Core] Expected FUNCTION as argument #1")local i={...}local j=h;local k={}k={pcall(j,table.unpack(i))}return table.unpack(k)end;g.runExternal=function(self,l,...)assert(type(l)=="string","[XAF Core] Expected STRING as argument #1")local m=l;local j=nil;local i={...}local k={}if b.exists(m)==true then local n=b.open(m,'r')local o=""local p=n:read(math.huge)while p do o=o..tostring(p)p=n:read(math.huge)end;n:close()j=load(o)k={pcall(j,table.unpack(i))}return table.unpack(k)else error("[XAF Error] File '"..m.."' does not exist")end end;g.stop=function(self,q)assert(type(q)=="boolean","[XAF Core] Expected BOOLEAN as argument #1")if q==true then c.clear()end;a.pushSignal("")coroutine.yield()os.exit()end;return g end;function f:getSecurityInstance()local g={}g.convertBinaryToHex=function(self,r,s)assert(type(r)=="string","[XAF Core] Expected STRING as argument #1")assert(type(s)=="boolean","[XAF Core] Expected BOOLEAN as argument #2")local t=r;local u=e.wlen(t)local v={string.byte(t,1,u)}local w=""local x=s;for y=1,u do w=w..string.format("%02x",v[y])end;if x==true then w=string.upper(w)end;return w end;g.getRandomHash=function(self,z,s)assert(type(z)=="number","[XAF Core] Expected NUMBER as argument #1")assert(type(s)=="boolean","[XAF Core] Expected BOOLEAN as argument #2")local A={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'}local B=z;local C=""local D=s;for y=1,B do C=C..A[math.random(1,16)]end;if D==true then C=string.upper(C)end;return C end;g.getRandomUuid=function(self,s)assert(type(s)=="boolean","[XAF Core] Expected BOOLEAN as argument #1")local E={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'}local F=""local G=""local H=s;for y=1,30 do G=G..E[math.random(1,16)]end;F=F..string.sub(G,1,8)F=F.."-"..string.sub(G,9,12)F=F.."-4"..string.sub(G,13,15)F=F.."-"..E[math.random(9,12)]..string.sub(G,16,18)F=F.."-"..string.sub(G,19,30)if H==true then F=string.upper(F)end;return F end;g.isUuid=function(self,F)assert(type(F)=="string","[XAF Core] Expected STRING as argument #1")local I=F;local J=e.wlen(F)local K="(%x%x%x%x%x%x%x%x[-]%x%x%x%x[-]%x%x%x%x[-]%x%x%x%x[-]%x%x%x%x%x%x%x%x%x%x%x%x)"local L=false;if J==36 and string.match(I,K)==I then L=true end;return L end;return g end;function f:getStringInstance()local g={}g.checkControlCharacter=function(self,M)assert(type(M)=="string","[XAF Core] Expected STRING as argument #1")local N=M;local O="[\0-\31\127]"local P=false;if string.find(N,O)then P=true end;return P end;g.checkSpecialCharacter=function(self,M)assert(type(M)=="string","[XAF Core] Expected STRING as argument #1")local N=M;local Q="[\a\b\f\n\r\t\v\\\"\'/]"local P=false;if string.find(N,Q)then P=true end;return P end;g.checkWhitespace=function(self,M)assert(type(M)=="string","[XAF Core] Expected STRING as argument #1")local N=M;local R="[\n\r\t\v ]"local P=false;if string.find(N,R)then P=true end;return P end;return g end;function f:getTableInstance()local g={}g.getLength=function(self,S)assert(type(S)=="table","[XAF Core] Expected TABLE as argument #1")local T=S;local U=0;for V,W in pairs(T)do U=U+1 end;return U end;g.loadFromFile=function(self,l)assert(type(l)=="string","[XAF Core] Expected STRING as argument #1")local X=string.char(13,10)local Y=l;local Z={}if b.exists(Y)==true then local _=b.open(Y,'r')local a0=''local a1=''while a1 do a0=a0 ..a1;a1=_:read(math.huge)end;for a2 in string.gmatch(a0,"[^"..X.."]+")do local a3=string.find(a2," = ")local V=nil;local W=nil;if string.sub(a2,1,3)~="[#]"then if a3 then local a4=string.sub(a2,1,3)local a5=string.sub(a2,5,a3-1)local a6=string.sub(a2,a3+3,a3+5)local a7=string.sub(a2,a3+7)if a4=="[S]"then V=tostring(a5)elseif a4=="[N]"then V=tonumber(a5)elseif a4=="[B]"then if a5=="true"then V=true elseif a5=="false"then V=false end elseif a4=="[?]"then else error("[XAF Error] Invalid table line syntax - invalid key marker")end;if a6=="[S]"then W=tostring(a7)elseif a6=="[N]"then W=tonumber(a7)elseif a6=="[B]"then if a7=="true"then W=true elseif a7=="false"then W=false end elseif a6=="[?]"then W=nil else error("[XAF Error] Invalid table line syntax - invalid value marker")end;if V then Z[V]=W end else error("[XAF Error] Invalid table data syntax - delimiter not found")end end end else error("[XAF Error] File '"..Y.."' does not exist")end;return Z end;g.saveToFile=function(self,S,l,a8)assert(type(S)=="table","[XAF Core] Expected TABLE as argument #1")assert(type(l)=="string","[XAF Core] Expected STRING as argument #2")assert(type(a8)=="boolean","[XAF Core] Expected BOOLEAN as argument #3")local a9=S;local aa=l;local ab=a8==true and'a'or'w'local ac=b.open(aa,ab)for V,W in g:sortByKey(a9,false)do local ad=type(V)local a4=''local ae=type(W)local a6=''a4=ad=="string"and"[S]"or ad=="number"and"[N]"or ad=="boolean"and"[B]"or"[?]"a6=ae=="string"and"[S]"or ae=="number"and"[N]"or ae=="boolean"and"[B]"or"[?]"ac:write(a4 ..' '..tostring(V).." = ")ac:write(a6 ..' '..tostring(W)..'\n')end;ac:close()return true end;g.searchByValue=function(self,S,W,af)assert(type(S)=="table","[XAF Core] Expected TABLE as argument #1")assert(type(W)~="nil","[XAF Core] Expected ANYTHING as argument #2")assert(type(af)=="number","[XAF Core] Expected NUMBER as argument #3")local ag=S;local ah=W;local ai=af;local aj={}for V,W in pairs(ag)do if ai==0 then if W==ah then table.insert(aj,V)end elseif ai>0 then if W>ah then table.insert(aj,V)end elseif ai<0 then if W<ah then table.insert(aj,V)end end end;return aj end;g.sortByKey=function(self,ak,al)assert(type(ak)=="table","[XAF Core] Expected TABLE as argument #1")assert(type(al)=="boolean","[XAF Core] Expected BOOLEAN as argument #2")local am=ak;local an=al;local ao={}local ap={}local aq={}local ar={}local as=function(at,au)return at<au end;local av=function(at,au)return at>au end;local aw={}local ax=1;local ay=0;for V,W in pairs(am)do local ad=type(V)if ad=="number"then table.insert(ao,V)elseif ad=="string"then table.insert(ap,V)elseif ad=="boolean"then table.insert(aq,tostring(V))else table.insert(ar,V)end;ax=ax+1 end;if an==true then table.sort(ao,av)table.sort(ap,av)table.sort(aq,av)else table.sort(ao,as)table.sort(ap,as)table.sort(aq,as)end;if an==true then for V,W in ipairs(ar)do table.insert(aw,W)end;for V,W in ipairs(aq)do if W=="true"then table.insert(aw,true)elseif W=="false"then table.insert(aw,false)end end;for V,W in ipairs(ap)do table.insert(aw,W)end;for V,W in ipairs(ao)do table.insert(aw,W)end else for V,W in ipairs(ao)do table.insert(aw,W)end;for V,W in ipairs(ap)do table.insert(aw,W)end;for V,W in ipairs(aq)do if W=="true"then table.insert(aw,true)elseif W=="false"then table.insert(aw,false)end end;for V,W in ipairs(ar)do table.insert(aw,W)end end;return function()ay=ay+1;if ay<ax then local V=aw[ay]local W=am[V]return V,W end end end;return g end;function f:getTextInstance()local g={}g.convertLinesToString=function(self,az,aA)assert(type(az)=="table","[XAF Core] Expected TABLE as argument #1")assert(type(aA)=="number","[XAF Core] Expected NUMBER as argument #2")local aB=az;local aC=aA;local aD=""local aE=""if aC>=0 and aC<=3 then aE=(aC==0 or aC==1)and' 'or aC==2 and''or aC==3 and'\n'for V,W in pairs(az)do aD=aD..tostring(W)..aE end;aD=string.sub(aD,1,e.wlen(aD)-1)return aD else error("[XAF Error] Invalid concatenation mode")end end;g.convertStringToLines=function(self,aF,aG)assert(type(aF)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aG)=="number","[XAF Core] Expected NUMBER as argument #2")local aH=aF;local aI=aG;local az={}for aF in d.wrappedLines(aH,aI,aI)do table.insert(az,aF)end;return az end;g.padCenter=function(self,aF,aG)assert(type(aF)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aG)=="number","[XAF Core] Expected NUMBER as argument #2")local aI=math.floor(aG)local aJ=string.sub(aF,1,aI)local aK=e.wlen(aJ)local aL=aI-aK;local aM=math.floor(aL/2)local aN=aL-aM;local aO=string.rep(" ",aM)..aJ..string.rep(" ",aN)return aO end;g.padLeft=function(self,aF,aG)assert(type(aF)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aG)=="number","[XAF Core] Expected NUMBER as argument #2")local aI=math.floor(aG)local aJ=string.sub(aF,1,aI)local aK=e.wlen(aJ)local aL=aI-aK;local aO=aJ..string.rep(" ",aL)return aO end;g.padRight=function(self,aF,aG)assert(type(aF)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aG)=="number","[XAF Core] Expected NUMBER as argument #2")local aI=math.floor(aG)local aJ=string.sub(aF,1,aI)local aK=e.wlen(aJ)local aL=aI-aK;local aO=string.rep(" ",aL)..aJ;return aO end;g.split=function(self,aF,a3)assert(type(aF)=="string","[XAF Core] Expected STRING as argument #1")assert(type(a3)=="string","[XAF Core] Expected STRING as argument #2")local aP=aF;local aQ=a3==''and' 'or a3;local aR={}for aS in string.gmatch(aP,"[^"..aQ.."]+")do table.insert(aR,aS)end;return aR end;return g end;return f
