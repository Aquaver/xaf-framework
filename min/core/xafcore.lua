local a=require("computer")local b=require("filesystem")local c=require("term")local d=require("text")local e=require("unicode")local f={C_NAME="XAF Core",C_INSTANCE=false,C_INHERIT=false,static={CONCAT_DEFAULT=0,CONCAT_SPACE=1,CONCAT_NOSPACE=2,CONCAT_NEWLINE=3}}function f:getExecutorInstance()local g={}g.run=function(self,h,...)assert(type(h)=="function","[XAF Core] Expected FUNCTION as argument #1")local i={...}local j=h;local k={}k={pcall(j,table.unpack(i))}return table.unpack(k)end;g.runExternal=function(self,l,...)assert(type(l)=="string","[XAF Core] Expected STRING as argument #1")local m=l;local j=nil;local i={...}local k={}if b.exists(m)==true then local n=b.open(m,'r')local o=""local p=n:read(math.huge)while p do o=o..tostring(p)p=n:read(math.huge)end;n:close()j=load(o)k={pcall(j,table.unpack(i))}return table.unpack(k)else error("[XAF Error] File '"..m.."' does not exist")end end;g.stop=function(self,q)assert(type(q)=="boolean","[XAF Core] Expected BOOLEAN as argument #1")if q==true then c.clear()end;a.pushSignal("")coroutine.yield()os.exit()end;return g end;function f:getMathInstance()local g={}g.checkInteger=function(self,r)assert(type(r)=="number","[XAF Core] Expected NUMBER as argument #1")local s=math.floor(r)local t=math.ceil(r)if s==t then return true else return false end end;g.checkNatural=function(self,r,u)assert(type(r)=="number","[XAF Core] Expected NUMBER as argument #1")assert(type(u)=="boolean","[XAF Core] Expected BOOLEAN as argument #2")local s=math.floor(r)local t=math.ceil(r)if s==t then if u==true then return r>0 else return r>=0 end else return false end end;g.getAdditiveInverse=function(self,r)assert(type(r)=="number","[XAF Core] Expected NUMBER as argument #1")local v=r;local w=v*-1;return w end;g.getMultiplicativeInverse=function(self,r)assert(type(r)=="number","[XAF Core] Expected NUMBER as argument #1")local v=r;local x=1/v;return x end;return g end;function f:getSecurityInstance()local g={}g.convertBinaryToHex=function(self,y,z)assert(type(y)=="string","[XAF Core] Expected STRING as argument #1")assert(type(z)=="boolean","[XAF Core] Expected BOOLEAN as argument #2")local A=y;local B=e.wlen(A)local C={string.byte(A,1,B)}local D=""local E=z;for F=1,B do D=D..string.format("%02x",C[F])end;if E==true then D=string.upper(D)end;return D end;g.getRandomHash=function(self,G,z)assert(type(G)=="number","[XAF Core] Expected NUMBER as argument #1")assert(type(z)=="boolean","[XAF Core] Expected BOOLEAN as argument #2")local H={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'}local I=G;local J=""local K=z;for F=1,I do J=J..H[math.random(1,16)]end;if K==true then J=string.upper(J)end;return J end;g.getRandomUuid=function(self,z)assert(type(z)=="boolean","[XAF Core] Expected BOOLEAN as argument #1")local L={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'}local M=""local N=""local O=z;for F=1,30 do N=N..L[math.random(1,16)]end;M=M..string.sub(N,1,8)M=M.."-"..string.sub(N,9,12)M=M.."-4"..string.sub(N,13,15)M=M.."-"..L[math.random(9,12)]..string.sub(N,16,18)M=M.."-"..string.sub(N,19,30)if O==true then M=string.upper(M)end;return M end;g.isUuid=function(self,M)assert(type(M)=="string","[XAF Core] Expected STRING as argument #1")local P=M;local Q=e.wlen(M)local R="(%x%x%x%x%x%x%x%x[-]%x%x%x%x[-]%x%x%x%x[-]%x%x%x%x[-]%x%x%x%x%x%x%x%x%x%x%x%x)"local S=false;if Q==36 and string.match(P,R)==P then S=true end;return S end;return g end;function f:getStringInstance()local g={}g.checkControlCharacter=function(self,T)assert(type(T)=="string","[XAF Core] Expected STRING as argument #1")local U=T;local V="[\0-\31\127]"local W=false;if string.find(U,V)then W=true end;return W end;g.checkSpecialCharacter=function(self,T)assert(type(T)=="string","[XAF Core] Expected STRING as argument #1")local U=T;local X="[\a\b\f\n\r\t\v\\\"\'/]"local W=false;if string.find(U,X)then W=true end;return W end;g.checkWhitespace=function(self,T)assert(type(T)=="string","[XAF Core] Expected STRING as argument #1")local U=T;local Y="[\n\r\t\v ]"local W=false;if string.find(U,Y)then W=true end;return W end;return g end;function f:getTableInstance()local g={}g.getLength=function(self,Z)assert(type(Z)=="table","[XAF Core] Expected TABLE as argument #1")local _=Z;local a0=0;for a1,a2 in pairs(_)do a0=a0+1 end;return a0 end;g.loadFromFile=function(self,l)assert(type(l)=="string","[XAF Core] Expected STRING as argument #1")local a3=string.char(13,10)local a4=l;local a5={}if b.exists(a4)==true then local a6=b.open(a4,'r')local a7=''local a8=''while a8 do a7=a7 ..a8;a8=a6:read(math.huge)end;a8=''a6:close()for a9 in string.gmatch(a7,"[^"..a3 .."]+")do local aa=string.find(a9," = ")local a1=nil;local a2=nil;if string.sub(a9,1,3)~="[#]"then if aa then local ab=string.sub(a9,1,3)local ac=string.sub(a9,5,aa-1)local ad=string.sub(a9,aa+3,aa+5)local ae=string.sub(a9,aa+7)if ab=="[S]"then a1=tostring(ac)elseif ab=="[N]"then a1=tonumber(ac)elseif ab=="[B]"then if ac=="true"then a1=true elseif ac=="false"then a1=false end elseif ab=="[?]"then else error("[XAF Error] Invalid table line syntax - invalid key marker")end;if ad=="[S]"then a2=tostring(ae)elseif ad=="[N]"then a2=tonumber(ae)elseif ad=="[B]"then if ae=="true"then a2=true elseif ae=="false"then a2=false end elseif ad=="[?]"then a2=nil else error("[XAF Error] Invalid table line syntax - invalid value marker")end;if a1 then a5[a1]=a2 end else error("[XAF Error] Invalid table data syntax - delimiter not found")end end end else error("[XAF Error] File '"..a4 .."' does not exist")end;return a5 end;g.saveToFile=function(self,Z,l,af)assert(type(Z)=="table","[XAF Core] Expected TABLE as argument #1")assert(type(l)=="string","[XAF Core] Expected STRING as argument #2")assert(type(af)=="boolean","[XAF Core] Expected BOOLEAN as argument #3")local ag=Z;local ah=l;local ai=af==true and'a'or'w'local aj=b.open(ah,ai)for a1,a2 in g:sortByKey(ag,false)do local ak=type(a1)local ab=''local al=type(a2)local ad=''ab=ak=="string"and"[S]"or ak=="number"and"[N]"or ak=="boolean"and"[B]"or"[?]"ad=al=="string"and"[S]"or al=="number"and"[N]"or al=="boolean"and"[B]"or"[?]"aj:write(ab..' '..tostring(a1).." = ")aj:write(ad..' '..tostring(a2)..'\n')end;aj:close()return true end;g.searchByValue=function(self,Z,a2,am)assert(type(Z)=="table","[XAF Core] Expected TABLE as argument #1")assert(type(a2)~="nil","[XAF Core] Expected ANYTHING as argument #2")assert(type(am)=="number","[XAF Core] Expected NUMBER as argument #3")local an=Z;local ao=a2;local ap=am;local aq={}for a1,a2 in pairs(an)do if ap==0 then if a2==ao then table.insert(aq,a1)end elseif ap>0 then if a2>ao then table.insert(aq,a1)end elseif ap<0 then if a2<ao then table.insert(aq,a1)end end end;return aq end;g.sortByKey=function(self,ar,as)assert(type(ar)=="table","[XAF Core] Expected TABLE as argument #1")assert(type(as)=="boolean","[XAF Core] Expected BOOLEAN as argument #2")local at=ar;local au=as;local av={}local aw={}local ax={}local ay={}local az=function(aA,aB)return aA<aB end;local aC=function(aA,aB)return aA>aB end;local aD={}local aE=1;local aF=0;for a1,a2 in pairs(at)do local ak=type(a1)if ak=="number"then table.insert(av,a1)elseif ak=="string"then table.insert(aw,a1)elseif ak=="boolean"then table.insert(ax,tostring(a1))else table.insert(ay,a1)end;aE=aE+1 end;if au==true then table.sort(av,aC)table.sort(aw,aC)table.sort(ax,aC)else table.sort(av,az)table.sort(aw,az)table.sort(ax,az)end;if au==true then for a1,a2 in ipairs(ay)do table.insert(aD,a2)end;for a1,a2 in ipairs(ax)do if a2=="true"then table.insert(aD,true)elseif a2=="false"then table.insert(aD,false)end end;for a1,a2 in ipairs(aw)do table.insert(aD,a2)end;for a1,a2 in ipairs(av)do table.insert(aD,a2)end else for a1,a2 in ipairs(av)do table.insert(aD,a2)end;for a1,a2 in ipairs(aw)do table.insert(aD,a2)end;for a1,a2 in ipairs(ax)do if a2=="true"then table.insert(aD,true)elseif a2=="false"then table.insert(aD,false)end end;for a1,a2 in ipairs(ay)do table.insert(aD,a2)end end;return function()aF=aF+1;if aF<aE then local a1=aD[aF]local a2=at[a1]return a1,a2 end end end;return g end;function f:getTextInstance()local g={}g.convertLinesToString=function(self,aG,aH)assert(type(aG)=="table","[XAF Core] Expected TABLE as argument #1")assert(type(aH)=="number","[XAF Core] Expected NUMBER as argument #2")local aI=aG;local aJ=aH;local aK=""local aL=""if aJ>=0 and aJ<=3 then aL=(aJ==0 or aJ==1)and' 'or aJ==2 and''or aJ==3 and'\n'for a1,a2 in pairs(aG)do aK=aK..tostring(a2)..aL end;aK=string.sub(aK,1,e.wlen(aK)-1)return aK else error("[XAF Error] Invalid concatenation mode")end end;g.convertStringToLines=function(self,aM,aN)assert(type(aM)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aN)=="number","[XAF Core] Expected NUMBER as argument #2")local aO=aM;local aP=aN;local aG={}for aM in d.wrappedLines(aO,aP,aP)do table.insert(aG,aM)end;return aG end;g.padCenter=function(self,aM,aN)assert(type(aM)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aN)=="number","[XAF Core] Expected NUMBER as argument #2")local aP=math.floor(aN)local aQ=string.sub(aM,1,aP)local aR=e.wlen(aQ)local aS=aP-aR;local aT=math.floor(aS/2)local aU=aS-aT;local aV=string.rep(" ",aT)..aQ..string.rep(" ",aU)return aV end;g.padLeft=function(self,aM,aN)assert(type(aM)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aN)=="number","[XAF Core] Expected NUMBER as argument #2")local aP=math.floor(aN)local aQ=string.sub(aM,1,aP)local aR=e.wlen(aQ)local aS=aP-aR;local aV=aQ..string.rep(" ",aS)return aV end;g.padRight=function(self,aM,aN)assert(type(aM)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aN)=="number","[XAF Core] Expected NUMBER as argument #2")local aP=math.floor(aN)local aQ=string.sub(aM,1,aP)local aR=e.wlen(aQ)local aS=aP-aR;local aV=string.rep(" ",aS)..aQ;return aV end;g.split=function(self,aM,aa)assert(type(aM)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aa)=="string","[XAF Core] Expected STRING as argument #2")local aW=aM;local aX=aa==''and' 'or aa;local aY={}for aZ in string.gmatch(aW,"[^"..aX.."]+")do table.insert(aY,aZ)end;return aY end;return g end;return f
