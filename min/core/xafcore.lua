local a=require("computer")local b=require("filesystem")local c=require("term")local d=require("text")local e=require("unicode")local f={C_NAME="XAF Core",C_INSTANCE=false,C_INHERIT=false,static={CONCAT_DEFAULT=0,CONCAT_SPACE=1,CONCAT_NOSPACE=2,CONCAT_NEWLINE=3}}function f:getExecutorInstance()local g={}g.run=function(self,h,...)assert(type(h)=="function","[XAF Core] Expected FUNCTION as argument #1")local i={...}local j=h;local k={}k={pcall(j,table.unpack(i))}return table.unpack(k)end;g.runExternal=function(self,l,...)assert(type(l)=="string","[XAF Core] Expected STRING as argument #1")local m=l;local j=nil;local i={...}local k={}if b.exists(m)==true then local n=b.open(m,'r')local o=""local p=n:read(math.huge)while p do o=o..tostring(p)p=n:read(math.huge)end;n:close()j=load(o)k={pcall(j,table.unpack(i))}return table.unpack(k)else error("[XAF Error] File '"..m.."' does not exist")end end;g.stop=function(self,q)assert(type(q)=="boolean","[XAF Core] Expected BOOLEAN as argument #1")if q==true then c.clear()end;a.pushSignal("")coroutine.yield()os.exit()end;return g end;function f:getSecurityInstance()local g={}g.convertBinaryToHex=function(self,r,s)assert(type(r)=="string","[XAF Core] Expected STRING as argument #1")assert(type(s)=="boolean","[XAF Core] Expected BOOLEAN as argument #2")local t=r;local u=e.wlen(t)local v={string.byte(t,1,u)}local w=""local x=s;for y=1,u do w=w..string.format("%02x",v[y])end;if x==true then w=string.upper(w)end;return w end;g.getRandomHash=function(self,z,s)assert(type(z)=="number","[XAF Core] Expected NUMBER as argument #1")assert(type(s)=="boolean","[XAF Core] Expected BOOLEAN as argument #2")local A={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'}local B=z;local C=""local D=s;for y=1,B do C=C..A[math.random(1,16)]end;if D==true then C=string.upper(C)end;return C end;g.getRandomUuid=function(self,s)assert(type(s)=="boolean","[XAF Core] Expected BOOLEAN as argument #1")local E={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'}local F=""local G=""local H=s;for y=1,30 do G=G..E[math.random(1,16)]end;F=F..string.sub(G,1,8)F=F.."-"..string.sub(G,9,12)F=F.."-4"..string.sub(G,13,15)F=F.."-"..E[math.random(9,12)]..string.sub(G,16,18)F=F.."-"..string.sub(G,19,30)if H==true then F=string.upper(F)end;return F end;g.isUuid=function(self,F)assert(type(F)=="string","[XAF Core] Expected STRING as argument #1")local I=F;local J=e.wlen(F)local K="(%x%x%x%x%x%x%x%x[-]%x%x%x%x[-]%x%x%x%x[-]%x%x%x%x[-]%x%x%x%x%x%x%x%x%x%x%x%x)"local L=false;if J==36 and string.match(I,K)==I then L=true end;return L end;return g end;function f:getStringInstance()local g={}g.checkControlCharacter=function(self,M)assert(type(M)=="string","[XAF Core] Expected STRING as argument #1")local N=M;local O="[\0-\31\127]"local P=false;if string.find(N,O)then P=true end;return P end;g.checkSpecialCharacter=function(self,M)assert(type(M)=="string","[XAF Core] Expected STRING as argument #1")local N=M;local Q="[\a\b\f\n\r\t\v\\\"\'/]"local P=false;if string.find(N,Q)then P=true end;return P end;g.checkWhitespace=function(self,M)assert(type(M)=="string","[XAF Core] Expected STRING as argument #1")local N=M;local R="[\n\r\t\v ]"local P=false;if string.find(N,R)then P=true end;return P end;return g end;function f:getTableInstance()local g={}g.getLength=function(self,S)assert(type(S)=="table","[XAF Core] Expected TABLE as argument #1")local T=S;local U=0;for V,W in pairs(T)do U=U+1 end;return U end;g.loadFromFile=function(self,l)assert(type(l)=="string","[XAF Core] Expected STRING as argument #1")local X=l;local Y={}if b.exists(X)==true then local Z=b.open(X,'r')local _=''local a0=''while a0 do _=_..a0;a0=Z:read(math.huge)end;for a1 in string.gmatch(_,"[^\n]+")do local a2=string.find(a1," = ")local V=nil;local W=nil;if string.sub(a1,1,3)~="[#]"then if a2 then local a3=string.sub(a1,1,3)local a4=string.sub(a1,5,a2-1)local a5=string.sub(a1,a2+3,a2+5)local a6=string.sub(a1,a2+7)if a3=="[S]"then V=tostring(a4)elseif a3=="[N]"then V=tonumber(a4)elseif a3=="[B]"then if a4=="true"then V=true elseif a4=="false"then V=false end elseif a3=="[?]"then else error("[XAF Error] Invalid table line syntax - invalid key marker")end;if a5=="[S]"then W=tostring(a6)elseif a5=="[N]"then W=tonumber(a6)elseif a5=="[B]"then if a6=="true"then W=true elseif a6=="false"then W=false end elseif a5=="[?]"then W=nil else error("[XAF Error] Invalid table line syntax - invalid value marker")end;if V then Y[V]=W end else error("[XAF Error] Invalid table data syntax - delimiter not found")end end end else error("[XAF Error] File '"..X.."' does not exist")end;return Y end;g.saveToFile=function(self,S,l,a7)assert(type(S)=="table","[XAF Core] Expected TABLE as argument #1")assert(type(l)=="string","[XAF Core] Expected STRING as argument #2")assert(type(a7)=="boolean","[XAF Core] Expected BOOLEAN as argument #3")local a8=S;local a9=l;local aa=a7==true and'a'or'w'local ab=b.open(a9,aa)for V,W in g:sortByKey(a8,false)do local ac=type(V)local a3=''local ad=type(W)local a5=''a3=ac=="string"and"[S]"or ac=="number"and"[N]"or ac=="boolean"and"[B]"or"[?]"a5=ad=="string"and"[S]"or ad=="number"and"[N]"or ad=="boolean"and"[B]"or"[?]"ab:write(a3 ..' '..tostring(V).." = ")ab:write(a5 ..' '..tostring(W)..'\n')end;ab:close()return true end;g.searchByValue=function(self,S,W,ae)assert(type(S)=="table","[XAF Core] Expected TABLE as argument #1")assert(type(W)~="nil","[XAF Core] Expected ANYTHING as argument #2")assert(type(ae)=="number","[XAF Core] Expected NUMBER as argument #3")local af=S;local ag=W;local ah=ae;local ai={}for V,W in pairs(af)do if ah==0 then if W==ag then table.insert(ai,V)end elseif ah>0 then if W>ag then table.insert(ai,V)end elseif ah<0 then if W<ag then table.insert(ai,V)end end end;return ai end;g.sortByKey=function(self,aj,ak)assert(type(aj)=="table","[XAF Core] Expected TABLE as argument #1")assert(type(ak)=="boolean","[XAF Core] Expected BOOLEAN as argument #2")local al=aj;local am=ak;local an={}local ao={}local ap={}local aq={}local ar=function(as,at)return as<at end;local au=function(as,at)return as>at end;local av={}local aw=1;local ax=0;for V,W in pairs(al)do local ac=type(V)if ac=="number"then table.insert(an,V)elseif ac=="string"then table.insert(ao,V)elseif ac=="boolean"then table.insert(ap,tostring(V))else table.insert(aq,V)end;aw=aw+1 end;if am==true then table.sort(an,au)table.sort(ao,au)table.sort(ap,au)else table.sort(an,ar)table.sort(ao,ar)table.sort(ap,ar)end;if am==true then for V,W in ipairs(aq)do table.insert(av,W)end;for V,W in ipairs(ap)do if W=="true"then table.insert(av,true)elseif W=="false"then table.insert(av,false)end end;for V,W in ipairs(ao)do table.insert(av,W)end;for V,W in ipairs(an)do table.insert(av,W)end else for V,W in ipairs(an)do table.insert(av,W)end;for V,W in ipairs(ao)do table.insert(av,W)end;for V,W in ipairs(ap)do if W=="true"then table.insert(av,true)elseif W=="false"then table.insert(av,false)end end;for V,W in ipairs(aq)do table.insert(av,W)end end;return function()ax=ax+1;if ax<aw then local V=av[ax]local W=al[V]return V,W end end end;return g end;function f:getTextInstance()local g={}g.convertLinesToString=function(self,ay,az)assert(type(ay)=="table","[XAF Core] Expected TABLE as argument #1")assert(type(az)=="number","[XAF Core] Expected NUMBER as argument #2")local aA=ay;local aB=az;local aC=""local aD=""if aB>=0 and aB<=3 then aD=(aB==0 or aB==1)and' 'or aB==2 and''or aB==3 and'\n'for V,W in pairs(ay)do aC=aC..tostring(W)..aD end;aC=string.sub(aC,1,e.wlen(aC)-1)return aC else error("[XAF Error] Invalid concatenation mode")end end;g.convertStringToLines=function(self,aE,aF)assert(type(aE)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aF)=="number","[XAF Core] Expected NUMBER as argument #2")local aG=aE;local aH=aF;local ay={}for aE in d.wrappedLines(aG,aH,aH)do table.insert(ay,aE)end;return ay end;g.padCenter=function(self,aE,aF)assert(type(aE)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aF)=="number","[XAF Core] Expected NUMBER as argument #2")local aH=math.floor(aF)local aI=string.sub(aE,1,aH)local aJ=e.wlen(aI)local aK=aH-aJ;local aL=math.floor(aK/2)local aM=aK-aL;local aN=string.rep(" ",aL)..aI..string.rep(" ",aM)return aN end;g.padLeft=function(self,aE,aF)assert(type(aE)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aF)=="number","[XAF Core] Expected NUMBER as argument #2")local aH=math.floor(aF)local aI=string.sub(aE,1,aH)local aJ=e.wlen(aI)local aK=aH-aJ;local aN=aI..string.rep(" ",aK)return aN end;g.padRight=function(self,aE,aF)assert(type(aE)=="string","[XAF Core] Expected STRING as argument #1")assert(type(aF)=="number","[XAF Core] Expected NUMBER as argument #2")local aH=math.floor(aF)local aI=string.sub(aE,1,aH)local aJ=e.wlen(aI)local aK=aH-aJ;local aN=string.rep(" ",aK)..aI;return aN end;g.split=function(self,aE,a2)assert(type(aE)=="string","[XAF Core] Expected STRING as argument #1")assert(type(a2)=="string","[XAF Core] Expected STRING as argument #2")local aO=aE;local aP=a2==''and' 'or a2;local aQ={}for aR in string.gmatch(aO,"[^"..aP.."]+")do table.insert(aQ,aR)end;return aQ end;return g end;return f
