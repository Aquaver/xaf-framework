local a=require("xaf/graphic/component")local b=require("xaf/core/xafcore")local c=b:getTableInstance()local d={C_NAME="Generic GUI List",C_INSTANCE=true,C_INHERIT=true,static={SELECT_DEFAULT=0,SELECT_SINGLE=1,SELECT_MULTIPLE=2}}function d:initialize()local e=a:extend()local f=e and e.private or{}local g=e and e.public or{}f.eventClick=nil;f.eventClickArguments={}f.eventScroll=nil;f.eventScrollArguments={}f.colorSelected=0xFFFFFF;f.contentLength=0;f.contentTable={}f.contentTableKeys={}f.columns=0;f.rows=0;f.scrollbarPosition=0;f.selectedKeys={}f.selectedValues={}f.selectionMode=0;f.showScrollbar=false;f.showKeys=false;f.relativeIndex=0;f.relativeMaxIndex=0;g.getContent=function(self)return f.contentTable end;g.getSelectedKeys=function(self)return f.selectedKeys end;g.getSelectedValues=function(self)return f.selectedValues end;g.getSelectionModel=function(self)return f.selectionMode,f.colorSelected end;g.getShowKeys=function(self)return f.showKeys end;g.register=function(self,h)assert(type(h)=="table","[XAF Graphic] Expected TABLE as argument #1")if f.active==true then if h[1]=="touch"then local i=h[2]if i==f.renderer.getScreen()then local j=h[3]local k=h[4]local l=f.renderMode;local m=0;local n=0;local o=0;local p=0;if l<=3 then m=f.positionX+2;n=f.positionY+1;o=f.positionX+f.totalWidth-3;p=f.positionY+f.totalHeight-2 end;if j>=m and j<=o and(k>=n and k<=p)then local q=k-f.positionY;local r=q+f.relativeIndex;local s=f.eventClick;local t=f.eventClickArguments;if f.selectionMode==0 or f.selectionMode==1 then local u=f.contentTableKeys[r]local v=f.contentTable[u]if f.selectedKeys[r]then f.selectedKeys[r]=nil;f.selectedValues[r]=nil else f.selectedKeys={}f.selectedValues={}f.selectedKeys[r]=u;f.selectedValues[r]=v end elseif f.selectionMode==2 then local u=f.contentTableKeys[r]local v=f.contentTable[u]if f.selectedKeys[r]then f.selectedKeys[r]=nil;f.selectedValues[r]=nil else f.selectedKeys[r]=u;f.selectedValues[r]=v end else error("[XAF Error] Invalid list selection mode")end;g:setRenderMode(3)g:view(f.showKeys)g:setRenderMode(l)if s then return s(table.unpack(t))end end end elseif h[1]=="scroll"then local i=h[2]if i==f.renderer.getScreen()then local w=h[3]local x=h[4]local y=h[5]local l=f.renderMode;local m=0;local n=0;local o=0;local p=0;if l<=1 then m=f.positionX;n=f.positionY;o=f.positionX+f.totalWidth-1;p=f.positionX+f.totalHeight-1 elseif l<=2 then m=f.positionX+1;n=f.positionY+1;o=f.positionX+f.totalWidth-2;p=f.positionX+f.totalHeight-2 elseif l<=3 then m=f.positionX+2;n=f.positionY+1;o=f.positionX+f.totalWidth-3;p=f.positionX+f.totalHeight-2 end;if w>=m and w<=o and(x>=n and x<=p)then local z=f.eventScroll;local t=f.eventScrollArguments;local A=0;local B=0;if y>0 and f.relativeIndex>0 then f.relativeIndex=f.relativeIndex-1 elseif y<0 and f.relativeIndex<f.relativeMaxIndex then f.relativeIndex=f.relativeIndex+1 end;A=f.relativeIndex/f.relativeMaxIndex;B=math.floor(A*(f.rows-1))f.scrollbarPosition=B;g:setRenderMode(3)g:view(f.showKeys)g:setRenderMode(l)if z then return z(table.unpack(t))end end end end end end;g.setContent=function(self,C,D)assert(type(C)=="table","[XAF Graphic] Expected TABLE as argument #1")assert(type(D)=="boolean","[XAF Graphic] Expected BOOLEAN as argument #2")f.contentLength=0;f.contentTable={}f.contentTableKeys={}f.selectedKeys={}f.selectedValues={}for u,v in c:sortByKey(C,D)do f.contentLength=f.contentLength+1;f.contentTable[u]=v;table.insert(f.contentTableKeys,u)end;f.relativeIndex=0;f.relativeMaxIndex=f.contentLength-f.rows;return true end;g.setOnClick=function(self,E,...)assert(type(E)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local F=E;local G={...}f.eventClick=F;f.eventClickArguments=G;return true end;g.setOnScroll=function(self,E,...)assert(type(E)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local F=E;local G={...}f.eventScroll=F;f.eventScrollArguments=G;return true end;g.setSelectionModel=function(self,H,I)assert(type(H)=="number","[XAF Graphic] Expected NUMBER as argument #1")assert(type(I)=="number","[XAF Graphic] Expected NUMBER as argument #2")if H>=0 and H<=2 then f.selectionMode=H else error("[XAF Error] Invalid list selection mode number")end;if I>=0 and I<=0xFFFFFF then f.colorSelected=I else error("[XAF Error] Invalid list selected color number")end;return true end;g.setShowKeys=function(self,J)assert(type(J)=="boolean","[XAF Graphic] Expected BOOLEAN as argument #1")f.showKeys=J;return true end;g.view=function(self)local K=f.renderer;if K then local L=f.columns;local M=f.rows;local N=f.totalWidth;local O=f.totalHeight;local P=f.positionX;local Q=f.positionY;local R=K.getBackground()local S=K.getForeground()local l=f.renderMode;if l<=1 then K.setBackground(f.colorBackground)K.setForeground(f.colorBorder)K.fill(P,Q,N-1,1,'─')K.fill(P,Q+O-1,N-1,1,'─')K.fill(P,Q,1,O-1,'│')K.fill(P+N-1,Q,1,O-1,'│')K.set(P,Q,'┌')K.set(P+N-1,Q,'┐')K.set(P,Q+O-1,'└')K.set(P+N-1,Q+O-1,'┘')if f.showScrollbar then K.fill(P+N-3,Q,1,O-1,'│')K.set(P+N-3,Q,'┬')K.set(P+N-3,Q+O-1,'┴')end end;if l<=2 then K.setBackground(f.colorBackground)K.fill(P+1,Q+1,1,O-2,' ')K.fill(P+L+2,Q+1,1,O-2,' ')end;if l<=3 then local T=f.contentTable;local U=f.contentTableKeys;local V=f.contentLength;local L=f.columns;local M=f.rows;local W=V<M and V or M;local X=f.showKeys;K.setBackground(f.colorBackground)K.setForeground(f.colorContent)K.fill(P+2,Q+1,L,M,' ')if f.showScrollbar==true then K.fill(P+L+4,Q+1,1,O-2,' ')K.set(P+L+4,Q+f.scrollbarPosition+1,'█')end;for Y=1,W do local Z=f.relativeIndex+Y;local I=f.selectedKeys[Z]and f.colorSelected or f.colorContent;local _=T[U[Z]]local a0=_==nil and''or tostring(_)a0=X==true and tostring(f.contentTableKeys[Z])..' | '..a0 or a0;K.setForeground(I)K.set(P+2,Q+Y,string.sub(a0,1,L))end end;K.setBackground(R)K.setForeground(S)return true else error("[XAF Error] Component GPU renderer has not been initialized")end end;return{private=f,public=g}end;function d:extend()local a1=self:initialize()local f=a1.private;local g=a1.public;if self.C_INHERIT==true then return{private=f,public=g}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function d:new(a2,a3,L,M,a4)local a1=self:initialize()local f=a1.private;local g=a1.public;g:setPosition(a2,a3)assert(type(L)=="number","[XAF Graphic] Expected NUMBER as argument #3")if math.floor(L)==L and math.ceil(L)==L and L>0 then f.columns=L else error("[XAF Error] Invalid columns number - must be a positive integer")end;assert(type(M)=="number","[XAF Graphic] Expected NUMBER as argument #4")if math.floor(M)==M and math.ceil(M)==M and M>0 then f.rows=M else error("[XAF Error] Invalid rows number - must be a positive integer")end;assert(type(a4)=="boolean","[XAF Graphic] Expected BOOLEAN as argument #5")f.showScrollbar=a4;f.totalWidth=a4==true and L+6 or L+4;f.totalHeight=M+2;if self.C_INSTANCE==true then return g else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return d
