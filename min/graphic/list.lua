local a=require("xaf/graphic/component")local b=require("xaf/core/xafcore")local c=b:getMathInstance()local d=b:getTableInstance()local e={C_NAME="Generic GUI List",C_INSTANCE=true,C_INHERIT=true,static={SELECT_DEFAULT=0,SELECT_SINGLE=1,SELECT_MULTIPLE=2,SELECT_NOTHING=3}}function e:initialize()local f=a:extend()local g=f and f.private or{}local h=f and f.public or{}g.eventClick=nil;g.eventClickArguments={}g.eventScroll=nil;g.eventScrollArguments={}g.colorSelected=0xFFFFFF;g.contentLength=0;g.contentTable={}g.contentTableKeys={}g.columns=0;g.rows=0;g.scrollbarPosition=0;g.selectedItems=0;g.selectedKeys={}g.selectedValues={}g.selectionMode=0;g.showScrollbar=false;g.showKeys=false;g.relativeIndex=0;g.relativeMaxIndex=0;h.getContent=function(self)return g.contentTable end;h.getSelectedKeys=function(self)return g.selectedKeys end;h.getSelectedValues=function(self)return g.selectedValues end;h.getSelectionModel=function(self)return g.selectionMode,g.colorSelected end;h.getShowKeys=function(self)return g.showKeys end;h.register=function(self,i)assert(type(i)=="table","[XAF Graphic] Expected TABLE as argument #1")if g.active==true then if i[1]=="touch"then local j=i[2]if j==g.renderer.getScreen()then local k=i[3]local l=i[4]local m=g.renderMode;local n=0;local o=0;local p=0;local q=0;if m<=a.static.RENDER_CONTENT then n=g.positionX+2;o=g.positionY+1;p=g.positionX+g.totalWidth-3;q=g.positionY+g.totalHeight-2 end;if k>=n and k<=p and(l>=o and l<=q)then local r=l-g.positionY;local s=r+g.relativeIndex;local t=g.eventClick;local u=g.eventClickArguments;if g.selectionMode==0 or g.selectionMode==1 then local v=g.contentTableKeys[s]local w=g.contentTable[v]if g.selectedKeys[s]then g.selectedItems=0;g.selectedKeys={}g.selectedValues={}else g.selectedKeys={}g.selectedValues={}g.selectedItems=1;g.selectedKeys[s]=v;g.selectedValues[s]=w end elseif g.selectionMode==2 then local v=g.contentTableKeys[s]local w=g.contentTable[v]if g.selectedKeys[s]then g.selectedItems=g.selectedItems-1;g.selectedKeys[s]=nil;g.selectedValues[s]=nil else g.selectedItems=g.selectedItems+1;g.selectedKeys[s]=v;g.selectedValues[s]=w end elseif g.selectionMode==3 then if g.selectedItems>0 then g.selectedItems=0;g.selectedKeys={}g.selectedValues={}end else error("[XAF Error] Invalid list selection mode")end;h:setRenderMode(a.static.RENDER_CONTENT)h:view(g.showKeys)h:setRenderMode(m)if t then return t(table.unpack(u))end end end elseif i[1]=="scroll"then local j=i[2]if j==g.renderer.getScreen()then local x=i[3]local y=i[4]local z=i[5]local m=g.renderMode;local n=0;local o=0;local p=0;local q=0;if m<=a.static.RENDER_ALL then n=g.positionX;o=g.positionY;p=g.positionX+g.totalWidth-1;q=g.positionY+g.totalHeight-1 elseif m<=a.static.RENDER_INSETS then n=g.positionX+1;o=g.positionY+1;p=g.positionX+g.totalWidth-2;q=g.positionY+g.totalHeight-2 elseif m<=a.static.RENDER_CONTENT then n=g.positionX+2;o=g.positionY+1;p=g.positionX+g.totalWidth-3;q=g.positionY+g.totalHeight-2 end;if x>=n and x<=p and(y>=o and y<=q)then local A=g.eventScroll;local u=g.eventScrollArguments;local B=0;local C=0;if z>0 and g.relativeIndex>0 then g.relativeIndex=g.relativeIndex-1 elseif z<0 and g.relativeIndex<g.relativeMaxIndex then g.relativeIndex=g.relativeIndex+1 end;B=g.relativeIndex/g.relativeMaxIndex;C=math.floor(B*(g.rows-1))g.scrollbarPosition=C;h:setRenderMode(a.static.RENDER_CONTENT)h:view(g.showKeys)h:setRenderMode(m)if A then return A(table.unpack(u))end end end end end end;h.setContent=function(self,D,E)assert(type(D)=="table","[XAF Graphic] Expected TABLE as argument #1")assert(type(E)=="boolean","[XAF Graphic] Expected BOOLEAN as argument #2")g.contentLength=0;g.contentTable={}g.contentTableKeys={}g.scrollbarPosition=0;g.selectedItems=0;g.selectedKeys={}g.selectedValues={}for v,w in d:sortByKey(D,E)do g.contentLength=g.contentLength+1;g.contentTable[v]=w;table.insert(g.contentTableKeys,v)end;g.relativeIndex=0;g.relativeMaxIndex=g.contentLength-g.rows;return true end;h.setOnClick=function(self,F,...)assert(type(F)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local G=F;local H={...}g.eventClick=G;g.eventClickArguments=H;return true end;h.setOnScroll=function(self,F,...)assert(type(F)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local G=F;local H={...}g.eventScroll=G;g.eventScrollArguments=H;return true end;h.setSelectionModel=function(self,I,J)assert(type(I)=="number","[XAF Graphic] Expected NUMBER as argument #1")assert(type(J)=="number","[XAF Graphic] Expected NUMBER as argument #2")if I>=e.static.SELECT_DEFAULT and I<=e.static.SELECT_NOTHING then g.selectionMode=I else error("[XAF Error] Invalid list selection mode number")end;if J>=0 and J<=0xFFFFFF then g.colorSelected=J else error("[XAF Error] Invalid list selected color number")end;return true end;h.setShowKeys=function(self,K)assert(type(K)=="boolean","[XAF Graphic] Expected BOOLEAN as argument #1")g.showKeys=K;return true end;h.view=function(self)local L=g.renderer;if L then local M=g.columns;local N=g.rows;local O=g.totalWidth;local P=g.totalHeight;local Q=g.positionX;local R=g.positionY;local S=L.getBackground()local T=L.getForeground()local m=g.renderMode;if m<=a.static.RENDER_ALL then L.setBackground(g.colorBackground)L.setForeground(g.colorBorder)L.fill(Q,R,O-1,1,'─')L.fill(Q,R+P-1,O-1,1,'─')L.fill(Q,R,1,P-1,'│')L.fill(Q+O-1,R,1,P-1,'│')L.set(Q,R,'┌')L.set(Q+O-1,R,'┐')L.set(Q,R+P-1,'└')L.set(Q+O-1,R+P-1,'┘')if g.showScrollbar then L.fill(Q+O-3,R,1,P-1,'│')L.set(Q+O-3,R,'┬')L.set(Q+O-3,R+P-1,'┴')end end;if m<=a.static.RENDER_INSETS then L.setBackground(g.colorBackground)L.fill(Q+1,R+1,1,P-2,' ')L.fill(Q+M+2,R+1,1,P-2,' ')end;if m<=a.static.RENDER_CONTENT then local U=g.contentTable;local V=g.contentTableKeys;local W=g.contentLength;local M=g.columns;local N=g.rows;local X=W<N and W or N;local Y=g.showKeys;L.setBackground(g.colorBackground)L.setForeground(g.colorContent)L.fill(Q+2,R+1,M,N,' ')if g.showScrollbar==true then if W>N then L.fill(Q+M+4,R+1,1,P-2,' ')L.set(Q+M+4,R+g.scrollbarPosition+1,'█')else L.fill(Q+M+4,R+1,1,P-2,'▒')end end;for Z=1,X do local _=g.relativeIndex+Z;local J=g.selectedKeys[_]and g.colorSelected or g.colorContent;local a0=U[V[_]]local a1=a0==nil and''or tostring(a0)a1=Y==true and tostring(g.contentTableKeys[_])..' | '..a1 or a1;L.setForeground(J)L.set(Q+2,R+Z,string.sub(a1,1,M))end end;L.setBackground(S)L.setForeground(T)return true else error("[XAF Error] Component GPU renderer has not been initialized")end end;return{private=g,public=h}end;function e:extend()local a2=self:initialize()local g=a2.private;local h=a2.public;if self.C_INHERIT==true then return{private=g,public=h}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function e:new(a3,a4,M,N,a5)local a2=self:initialize()local g=a2.private;local h=a2.public;h:setPosition(a3,a4)assert(type(M)=="number","[XAF Graphic] Expected NUMBER as argument #3")if c:checkNatural(M,true)==true then g.columns=M else error("[XAF Error] Invalid columns number - must be a positive integer")end;assert(type(N)=="number","[XAF Graphic] Expected NUMBER as argument #4")if c:checkNatural(N,true)==true then g.rows=N else error("[XAF Error] Invalid rows number - must be a positive integer")end;assert(type(a5)=="boolean","[XAF Graphic] Expected BOOLEAN as argument #5")g.showScrollbar=a5;g.totalWidth=a5==true and M+6 or M+4;g.totalHeight=N+2;if self.C_INSTANCE==true then return h else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return e
