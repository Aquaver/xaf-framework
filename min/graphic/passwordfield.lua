local a=require("xaf/graphic/component")local b=require("unicode")local c=require("xaf/core/xafcore")local d=c:getMathInstance()local e={C_NAME="Generic GUI Password Field",C_INSTANCE=true,C_INHERIT=true,static={}}function e:initialize()local f=a:extend()local g=f and f.private or{}local h=f and f.public or{}g.colorSelected=0xFFFFFF;g.eventClick=nil;g.eventClickArguments={}g.eventKey=nil;g.eventKeyArguments={}g.eventPaste=nil;g.eventPasteArguments={}g.fieldFocus=false;g.inputCharacter='*'g.inputValue=''g.showFlag=false;h.getColorSelected=function(self)return g.colorSelected end;h.getInput=function(self)return g.inputValue end;h.getMaskingCharacter=function(self)return g.inputCharacter end;h.getShowPassword=function(self)return g.showFlag end;h.register=function(self,i)assert(type(i)=="table","[XAF Graphic] Expected TABLE as argument #1")if g.active==true then if i[1]=="clipboard"then local j=g.eventPaste;local k=g.eventPasteArguments;if g.fieldFocus==true then local l=g.columns;local m=g.renderMode;local n=i[3]local o=string.gsub(n,"[\n]+",' ')local p=g.inputValue;local q=p==nil and''or tostring(p)local r=q..o;g.inputValue=b.sub(r,1,l)h:setRenderMode(a.static.RENDER_CONTENT)h:view()h:setRenderMode(m)if j then return j(table.unpack(k))end end elseif i[1]=="key_down"then local s=g.eventKey;local t=g.eventKeyArguments;if g.fieldFocus==true then local u=i[3]local m=g.renderMode;if u==8 then local p=g.inputValue;local q=p==nil and''or tostring(p)local r=b.sub(q,1,b.wlen(q)-1)g.inputValue=r elseif u>=32 and u<=126 then local l=g.columns;local p=g.inputValue;local q=p==nil and''or tostring(p)local r=q..string.char(u)g.inputValue=b.sub(r,1,l)end;h:setRenderMode(a.static.RENDER_CONTENT)h:view()h:setRenderMode(m)if s then return s(table.unpack(t))end end elseif i[1]=="touch"then local v=g.eventClick;local w=g.eventClickArguments;local x=i[2]if x==g.renderer.getScreen()then local y=i[3]local z=i[4]local m=g.renderMode;local A=0;local B=0;local C=0;local D=0;if m<=a.static.RENDER_ALL then A=g.positionX;B=g.positionY;C=g.positionX+g.totalWidth-1;D=g.positionY+g.totalHeight-1 elseif m<=a.static.RENDER_INSETS then A=g.positionX+1;B=g.positionY+1;C=g.positionX+g.totalWidth-2;D=g.positionY+g.totalHeight-2 elseif m<=a.static.RENDER_CONTENT then A=g.positionX+2;B=g.positionY+1;C=g.positionX+g.totalWidth-3;D=g.positionY+g.totalHeight-2 end;if y>=A and y<=C and(z>=B and z<=D)then g.fieldFocus=true;h:setRenderMode(a.static.RENDER_CONTENT)h:view()h:setRenderMode(m)if v then return v(table.unpack(w))end else if g.fieldFocus==true then g.fieldFocus=false;h:setRenderMode(a.static.RENDER_CONTENT)h:view()h:setRenderMode(m)end end end end end end;h.setColorSelected=function(self,E)assert(type(E)=="number","[XAF Graphic] Expected NUMBER as argument #1")if E>=0 and E<=0xFFFFFF then g.colorSelected=E else error("[XAF Error] Invalid password field selection color number")end;return true end;h.setInput=function(self,o)assert(type(o)=="string","[XAF Graphic] Expected STRING as argument #1")local F=o;local G=g.columns;if F==nil then g.inputValue=''else g.inputValue=b.sub(F,1,G)end;return true end;h.setMaskingCharacter=function(self,H)assert(type(H)=="string","[XAF Graphic] Expected STRING as argument #1")if H~=''then g.inputCharacter=b.sub(H,1,1)else error("[XAF Error] Password masking character cannot be empty")end;return true end;h.setOnClick=function(self,I,...)assert(type(I)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local J=I;local K={...}g.eventClick=J;g.eventClickArguments=K;return true end;h.setOnKey=function(self,I,...)assert(type(I)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local J=I;local K={...}g.eventKey=J;g.eventKeyArguments=K;return true end;h.setOnPaste=function(self,I,...)assert(type(I)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local J=I;local K={...}g.eventPaste=J;g.eventPasteArguments=K;return true end;h.setShowPassword=function(self,L)assert(type(L)=="boolean","[XAF Graphic] Expected BOOLEAN as argument #1")g.showFlag=L;return true end;h.view=function(self)local M=g.renderer;if M then local N=g.columns;local O=g.totalWidth;local P=g.totalHeight;local Q=g.positionX;local R=g.positionY;local S=M.getBackground()local T=M.getForeground()local m=g.renderMode;if m<=a.static.RENDER_ALL then M.setBackground(g.colorBackground)M.setForeground(g.colorBorder)M.fill(Q,R,O-1,1,'─')M.fill(Q,R+P-1,O-1,1,'─')M.fill(Q,R,1,P-1,'│')M.fill(Q+O-1,R,1,P-1,'│')M.set(Q,R,'┌')M.set(Q+O-1,R,'┐')M.set(Q,R+P-1,'└')M.set(Q+O-1,R+P-1,'┘')end;if m<=a.static.RENDER_INSETS then M.setBackground(g.colorBackground)M.set(Q+1,R+1,' ')M.set(Q+O-2,R+1,' ')end;if m<=a.static.RENDER_CONTENT then local U=g.fieldFocus==true and g.colorSelected or g.colorContent;local V=g.inputValue;local W=V==nil and''or tostring(V)local X=''M.setBackground(g.colorBackground)M.fill(Q+2,R+1,N,P-2,' ')if g.showFlag==false then X=string.gsub(W,".",g.inputCharacter)else X=W end;if b.wlen(X)<N and g.fieldFocus==true then X=X..'|'end;M.setForeground(U)M.set(Q+2,R+1,X)end;M.setBackground(S)M.setForeground(T)return true else error("[XAF Error] Component GPU renderer has not been initialized")end end;return{private=g,public=h}end;function e:extend()local Y=self:initialize()local g=Y.private;local h=Y.public;if self.C_INHERIT==true then return{private=g,public=h}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function e:new(Z,_,N)local Y=self:initialize()local g=Y.private;local h=Y.public;h:setPosition(Z,_)assert(type(N)=="number","[XAF Graphic] Expected NUMBER as argument #3")if d:checkNatural(N,true)==true then g.columns=N;g.totalWidth=N+4;g.totalHeight=3 else error("[XAF Error] Invalid columns number - must be a positive integer")end;if self.C_INSTANCE==true then return h else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return e
