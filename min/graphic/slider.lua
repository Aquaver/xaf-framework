local a=require("graphic/component")local b={C_NAME="Generic GUI Slider",C_INSTANCE=true,C_INHERIT=true,static={ROTATE_DEFAULT=0,ROTATE_HORIZONTAL=1,ROTATE_VERTICAL=2}}function b:initialize()local c=a:extend()local d=c and c.private or{}local e=c and c.public or{}d.eventDrag=nil;d.eventDragArguments={}d.length=0;d.positionTable={}d.rotation=0;d.value=0;e.getValue=function(self)return d.value end;e.register=function(self,f)assert(type(f)=="table","[XAF Graphic] Expected TABLE as argument #1")if d.active==true then if f[1]=="drag"then local g=f[2]if g==d.renderer.getScreen()then local h=f[3]local i=f[4]local j=d.renderMode;local k=0;local l=0;local m=0;local n=0;if j<=1 then k=d.positionX;l=d.positionY;m=d.positionX+d.totalWidth-1;n=d.positionY+d.totalHeight-1 elseif j<=2 then k=d.positionX+1;l=d.positionY+1;m=d.positionX+d.totalWidth-2;n=d.positionY+d.totalHeight-2 elseif j<=3 then k=d.positionX+2;l=d.positionY+1;m=d.positionX+d.totalWidth-3;n=d.positionY+d.totalHeight-2 end;if h>=k and h<=m and(i>=l and i<=n)then local o=tostring(h..':'..i)local p=d.positionTable;if p[o]then local f=d.eventDrag;local q=d.eventDragArguments;local r=d.renderer;if r then local s=d.positionX;local t=d.positionY;local u=r.getBackground()local v=r.getForeground()local w=(d.rotation==0 or d.rotation==1)and'─'or'│'e:setRenderMode(3)e:view()e:setRenderMode(j)r.setBackground(d.colorBackground)r.setForeground(d.colorContent)if d.rotation==0 or d.rotation==1 then d.value=p[o]r.set(s+3,t+1,w)r.set(h,i,'█')else d.value=p[o]r.set(s+2,t+2,w)r.set(h,i,'█')end;r.setBackground(u)r.setForeground(v)end;if f then return f(table.unpack(q))end end end end end end end;e.setOnDrag=function(self,x,...)assert(type(x)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local y=x;local z={...}d.eventDrag=y;d.eventDragArguments=z;return true end;e.setValues=function(self,A,B,C)assert(type(A)=="number","[XAF Graphic] Expected NUMBER as argument #1")assert(type(B)=="number","[XAF Graphic] Expected NUMBER as argument #2")assert(type(C)=="number","[XAF Graphic] Expected NUMBER as argument #3")local D=A;local E=B;local F=0;local G=C;local H=d.length;local s=d.positionX;local t=d.positionY;if math.floor(C)==C and math.ceil(C)==C and C>0 then G=C else error("[XAF Error] Invalid slider bar incremental number - must be a positive integer")end;if d.rotation==0 or d.rotation==1 then for I=s+3,s+H+2,G do local J=tostring(I..':'..t+1)local K=D+E*F;d.positionTable[J]=K;F=F+1 end else for I=t+2,t+H+1,G do local J=tostring(s+2 ..':'..I)local K=D+E*F;d.positionTable[J]=K;F=F+1 end end;return true end;e.view=function(self)local r=d.renderer;if r then local L=d.totalWidth;local M=d.totalHeight;local N=d.length;local s=d.positionX;local t=d.positionY;local u=r.getBackground()local v=r.getForeground()local j=d.renderMode;if j<=1 then r.setBackground(d.colorBackground)r.setForeground(d.colorBorder)r.fill(s,t,L-1,1,'─')r.fill(s,t+M-1,L-1,1,'─')r.fill(s,t,1,M-1,'│')r.fill(s+L-1,t,1,M-1,'│')r.set(s,t,'┌')r.set(s+L-1,t,'┐')r.set(s,t+M-1,'└')r.set(s+L-1,t+M-1,'┘')end;if j<=2 then r.setBackground(d.colorBackground)r.fill(s+1,t+1,1,M-2,' ')r.fill(s+L-2,t+1,1,M-2,' ')end;if j<=3 then r.setBackground(d.colorBackground)r.setForeground(d.colorContent)if d.rotation==0 or d.rotation==1 then r.fill(s+3,t+1,N,1,'─')r.set(s+2,t+1,'├')r.set(s+N+3,t+1,'┤')r.set(s+3,t+1,'█')else r.fill(s+2,t+2,1,N,'│')r.set(s+2,t+1,'┬')r.set(s+2,t+N+2,'┴')r.set(s+2,t+2,'█')end end;r.setBackground(u)r.setForeground(v)return true else error("[XAF Error] Component GPU renderer has not been initialized")end end;return{private=d,public=e}end;function b:extend()local O=self:initialize()local d=O.private;local e=O.public;if self.C_INHERIT==true then return{private=d,public=e}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function b:new(P,Q,R,S)local O=self:initialize()local d=O.private;local e=O.public;e:setPosition(P,Q)assert(type(R)=="number","[XAF Graphic] Expected NUMBER as argument #3")if math.floor(R)==R and math.ceil(R)==R and R>0 then d.length=R else error("[XAF Error] Invalid slider length number - must be a positive integer")end;assert(type(S)=="number","[XAF Graphic] Expected NUMBER as argument #4")if math.floor(S)==S and math.ceil(S)==S and(S>=0 and S<=2)then d.rotation=S else error("[XAF Error] Invalid slider rotation mode")end;d.totalWidth=(S==0 or S==1)and R+6 or 5;d.totalHeight=(S==0 or S==1)and 3 or R+4;if self.C_INSTANCE==true then return e else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return b
