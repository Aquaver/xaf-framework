local a=require("xaf/graphic/component")local b=require("unicode")local c=require("xaf/core/xafcore")local d=c:getMathInstance()local e={C_NAME="Generic GUI Text Field",C_INSTANCE=true,C_INHERIT=true,static={}}function e:initialize()local f=a:extend()local g=f and f.private or{}local h=f and f.public or{}g.colorSelected=0xFFFFFF;g.eventClick=nil;g.eventClickArguments={}g.eventKey=nil;g.eventKeyArguments={}g.eventPaste=nil;g.eventPasteArguments={}g.fieldFocus=false;g.selectedLine=0;g.textTable={}g.refreshLine=function(self,i)assert(type(i)=="number","[XAF Graphic] Expected NUMBER as argument #1")local j=g.positionX;local k=g.positionY;local l=g.columns;local m=g.rows;local n=i;local o=g.textTable;if n<=m then local p=g.renderer;if p then local q=p.getBackground()local r=p.getForeground()p.setBackground(g.colorBackground)p.setForeground(g.colorSelected)p.set(j+2,k+n,string.rep(' ',l))p.set(j+2,k+n,b.sub(o[n]..'|',1,l))p.setBackground(q)p.setForeground(r)else error("[XAF Error] Component GPU renderer has not been initialized")end else error("[XAF Error] Invalid text line number")end;return true end;h.clear=function(self)g.fieldFocus=false;h:setText({})h:view()return true end;h.getColorSelected=function(self)return g.colorSelected end;h.getText=function(self)return g.textTable end;h.register=function(self,s)assert(type(s)=="table","[XAF Graphic] Expected TABLE as argument #1")if g.active==true then if s[1]=="clipboard"then local t=g.eventPaste;local u=g.eventPasteArguments;if g.fieldFocus==true then local v=g.columns;local w=g.selectedLine;local x=s[3]local y=string.gsub(x,"[\n]+",' ')local z=g.textTable[w]local A=z==nil and''or tostring(z)local B=A..y;g.textTable[w]=b.sub(B,1,v)g:refreshLine(w)if t then return t(table.unpack(u))end end elseif s[1]=="key_down"then local C=g.eventKey;local D=g.eventKeyArguments;if g.fieldFocus==true then local E=s[3]local F=s[4]local G=g.renderMode;if F==28 or F==208 then if g.selectedLine<g.rows then g.selectedLine=g.selectedLine+1;h:setRenderMode(3)h:view()h:setRenderMode(G)end elseif F==200 then if g.selectedLine>1 then g.selectedLine=g.selectedLine-1;h:setRenderMode(3)h:view()h:setRenderMode(G)end else if E==8 then local w=g.selectedLine;local z=g.textTable[w]local A=z==nil and''or tostring(z)local B=b.sub(A,1,b.wlen(A)-1)g.textTable[w]=B;g:refreshLine(w)elseif E>=32 and E<=126 then local v=g.columns;local w=g.selectedLine;local z=g.textTable[w]local A=z==nil and''or tostring(z)local B=A..string.char(E)g.textTable[w]=b.sub(B,1,v)g:refreshLine(w)end end;if C then return C(table.unpack(D))end end elseif s[1]=="touch"then local H=g.eventClick;local I=g.eventClickArguments;local J=s[2]if J==g.renderer.getScreen()then local K=s[3]local L=s[4]local G=g.renderMode;local M=0;local N=0;local O=0;local P=0;if G<=3 then M=g.positionX+2;N=g.positionY+1;O=g.positionX+g.totalWidth-3;P=g.positionY+g.totalHeight-2 end;if K>=M and K<=O and(L>=N and L<=P)then local Q=L;local R=Q-g.positionY;g.fieldFocus=true;g.selectedLine=R;h:setRenderMode(3)h:view()h:setRenderMode(G)if H then return H(table.unpack(I))end else if g.fieldFocus==true then g.fieldFocus=false;g.selectedLine=0;h:setRenderMode(3)h:view()h:setRenderMode(G)end end end end end end;h.setColorSelected=function(self,S)assert(type(S)=="number","[XAF Graphic] Expected NUMBER as argument #1")if S>=0 and S<=0xFFFFFF then g.colorSelected=S else error("[XAF Error] Invalid text field selection color number")end;return true end;h.setOnClick=function(self,T,...)assert(type(T)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local s=T;local U={...}g.eventClick=s;g.eventClickArguments=U;return true end;h.setOnKey=function(self,T,...)assert(type(T)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local s=T;local U={...}g.eventKey=s;g.eventKeyArguments=U;return true end;h.setOnPaste=function(self,T,...)assert(type(T)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local s=T;local U={...}g.eventPaste=s;g.eventPasteArguments=U;return true end;h.setText=function(self,V)assert(type(V)=="table","[XAF Graphic] Expected TABLE as argument #1")local W=g.columns;local X=g.rows;local o={}g.selectedLine=0;g.textTable={}for Y=1,X do local Z=V[Y]local i=Z==nil and''or b.sub(tostring(Z),1,W)table.insert(o,i)X=X+1 end;g.textTable=o;return true end;h.view=function(self)local p=g.renderer;if p then local _=g.columns;local a0=g.rows;local a1=g.totalWidth;local a2=g.totalHeight;local j=g.positionX;local k=g.positionY;local q=p.getBackground()local r=p.getForeground()local G=g.renderMode;if G<=1 then p.setBackground(g.colorBackground)p.setForeground(g.colorBorder)p.fill(j,k,a1-1,1,'─')p.fill(j,k+a2-1,a1-1,1,'─')p.fill(j,k,1,a2-1,'│')p.fill(j+a1-1,k,1,a2-1,'│')p.set(j,k,'┌')p.set(j+a1-1,k,'┐')p.set(j,k+a2-1,'└')p.set(j+a1-1,k+a2-1,'┘')end;if G<=2 then p.setBackground(g.colorBackground)p.fill(j+1,k+1,1,a0,' ')p.fill(j+_+2,k+1,1,a0,' ')end;if G<=3 then local X=g.columns;local o=g.textTable;p.setBackground(g.colorBackground)p.fill(j+2,k+1,_,a0,' ')for Y=1,X do local a3=g.selectedLine==Y and g.colorSelected or g.colorContent;local Z=o[Y]local i=Z==nil and''or tostring(Z)if b.wlen(i)<_ and g.selectedLine==Y then i=i..'|'end;p.setForeground(a3)p.set(j+2,k+Y,i)end end;p.setBackground(q)p.setForeground(r)return true else error("[XAF Error] Component GPU renderer has not been initialized")end end;return{private=g,public=h}end;function e:extend()local a4=self:initialize()local g=a4.private;local h=a4.public;if self.C_INHERIT==true then return{private=g,public=h}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function e:new(a5,a6,_,a0)local a4=self:initialize()local g=a4.private;local h=a4.public;h:setPosition(a5,a6)assert(type(_)=="number","[XAF Graphic] Expected NUMBER as argument #3")if d:checkNatural(_,true)==true then g.columns=_;g.totalWidth=_+4 else error("[XAF Error] Invalid columns number - must be a positive integer")end;assert(type(a0)=="number","[XAF Graphic] Expected NUMBER as argument #4")if d:checkNatural(a0,true)==true then g.rows=a0;g.totalHeight=a0+2;h:setText({})else error("[XAF Error] Invalid rows number - must be a positive integer")end;if self.C_INSTANCE==true then return h else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return e
