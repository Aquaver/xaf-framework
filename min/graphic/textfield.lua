local a=require("xaf/graphic/component")local b=require("unicode")local c=require("xaf/core/xafcore")local d=c:getMathInstance()local e={C_NAME="Generic GUI Text Field",C_INSTANCE=true,C_INHERIT=true,static={}}function e:initialize()local f=a:extend()local g=f and f.private or{}local h=f and f.public or{}g.colorSelected=0xFFFFFF;g.eventClick=nil;g.eventClickArguments={}g.eventKey=nil;g.eventKeyArguments={}g.eventPaste=nil;g.eventPasteArguments={}g.fieldFocus=false;g.lineExtension=0;g.selectedLine=0;g.textTable={}g.refreshLine=function(self,i)assert(type(i)=="number","[XAF Graphic] Expected NUMBER as argument #1")local j=g.positionX;local k=g.positionY;local l=g.columns;local m=g.rows;local n=i;local o=g.textTable;local p=g.columns+g.lineExtension;local q=b.wlen(o[n])if n<=m then local r=g.renderer;if r then local s=r.getBackground()local t=r.getForeground()r.setBackground(g.colorBackground)r.setForeground(g.colorSelected)r.set(j+2,k+n,string.rep(' ',l))if q<l then r.set(j+2,k+n,b.sub(o[n]..'|',1,l))else local u=o[n]if q<p then u=u..'|'end;r.set(j+2,k+n,b.sub(u,-l,-1))end;r.setBackground(s)r.setForeground(t)else error("[XAF Error] Component GPU renderer has not been initialized")end else error("[XAF Error] Invalid text line number")end;return true end;h.clear=function(self)g.fieldFocus=false;h:setText({})h:view()return true end;h.getColorSelected=function(self)return g.colorSelected end;h.getLineExtension=function(self)return g.lineExtension end;h.getText=function(self)return g.textTable end;h.getTrimmedText=function(self)local o=g.textTable;local v={}for w=1,#o do table.insert(v,o[w])end;for w=#o,1,-1 do if v[w]==''or v[w]==nil then v[w]=nil else break end end;return v end;h.register=function(self,x)assert(type(x)=="table","[XAF Graphic] Expected TABLE as argument #1")if g.active==true then if x[1]=="clipboard"then local y=g.eventPaste;local z=g.eventPasteArguments;if g.fieldFocus==true then local q=g.columns+g.lineExtension;local A=g.selectedLine;local B=x[3]local C=string.gsub(B,"[\n]+",' ')local D=g.textTable[A]local E=D==nil and''or tostring(D)local F=E..C;g.textTable[A]=b.sub(F,1,q)g:refreshLine(A)if y then return y(table.unpack(z))end end elseif x[1]=="key_down"then local G=g.eventKey;local H=g.eventKeyArguments;if g.fieldFocus==true then local I=x[3]local J=x[4]local K=g.renderMode;if J==28 or J==208 then if g.selectedLine<g.rows then g.selectedLine=g.selectedLine+1;h:setRenderMode(a.static.RENDER_CONTENT)h:view()h:setRenderMode(K)end elseif J==200 then if g.selectedLine>1 then g.selectedLine=g.selectedLine-1;h:setRenderMode(a.static.RENDER_CONTENT)h:view()h:setRenderMode(K)end else if I==8 then local A=g.selectedLine;local D=g.textTable[A]local E=D==nil and''or tostring(D)local F=b.sub(E,1,b.wlen(E)-1)if E==''and A>1 then g.selectedLine=A-1;h:view()else g.textTable[A]=F;g:refreshLine(A)end elseif I>=32 and I<=126 then local q=g.columns+g.lineExtension;local A=g.selectedLine;local D=g.textTable[A]local E=D==nil and''or tostring(D)local F=E..string.char(I)g.textTable[A]=b.sub(F,1,q)g:refreshLine(A)end end;if G then return G(table.unpack(H))end end elseif x[1]=="touch"then local L=g.eventClick;local M=g.eventClickArguments;local N=x[2]if N==g.renderer.getScreen()then local O=x[3]local P=x[4]local K=g.renderMode;local Q=0;local R=0;local S=0;local T=0;if K<=a.static.RENDER_CONTENT then Q=g.positionX+2;R=g.positionY+1;S=g.positionX+g.totalWidth-3;T=g.positionY+g.totalHeight-2 end;if O>=Q and O<=S and(P>=R and P<=T)then local U=P;local V=U-g.positionY;g.fieldFocus=true;g.selectedLine=V;h:setRenderMode(a.static.RENDER_CONTENT)h:view()h:setRenderMode(K)if L then return L(table.unpack(M))end else if g.fieldFocus==true then g.fieldFocus=false;g.selectedLine=0;h:setRenderMode(a.static.RENDER_CONTENT)h:view()h:setRenderMode(K)end end end end end end;h.setColorSelected=function(self,W)assert(type(W)=="number","[XAF Graphic] Expected NUMBER as argument #1")if W>=0 and W<=0xFFFFFF then g.colorSelected=W else error("[XAF Error] Invalid text field selection color number")end;return true end;h.setLineExtension=function(self,X)assert(type(X)=="number","[XAF Graphic] Expected NUMBER as argument #1")if d:checkNatural(X,false)==true then g.lineExtension=X;h:clear()else error("[XAF Error] Invalid new line extension value - must be natural number (including zero)")end;return true end;h.setOnClick=function(self,Y,...)assert(type(Y)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local x=Y;local Z={...}g.eventClick=x;g.eventClickArguments=Z;return true end;h.setOnKey=function(self,Y,...)assert(type(Y)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local x=Y;local Z={...}g.eventKey=x;g.eventKeyArguments=Z;return true end;h.setOnPaste=function(self,Y,...)assert(type(Y)=="function","[XAF Graphic] Expected FUNCTION as argument #1")local x=Y;local Z={...}g.eventPaste=x;g.eventPasteArguments=Z;return true end;h.setText=function(self,_)assert(type(_)=="table","[XAF Graphic] Expected TABLE as argument #1")local a0=g.columns+g.lineExtension;local a1=g.rows;local o={}g.selectedLine=0;g.textTable={}for w=1,a1 do local a2=_[w]local i=a2==nil and''or b.sub(tostring(a2),1,a0)table.insert(o,i)a1=a1+1 end;g.textTable=o;return true end;h.view=function(self)local r=g.renderer;if r then local a3=g.columns;local a4=g.rows;local a5=g.totalWidth;local a6=g.totalHeight;local j=g.positionX;local k=g.positionY;local s=r.getBackground()local t=r.getForeground()local K=g.renderMode;if K<=a.static.RENDER_ALL then r.setBackground(g.colorBackground)r.setForeground(g.colorBorder)r.fill(j,k,a5-1,1,'─')r.fill(j,k+a6-1,a5-1,1,'─')r.fill(j,k,1,a6-1,'│')r.fill(j+a5-1,k,1,a6-1,'│')r.set(j,k,'┌')r.set(j+a5-1,k,'┐')r.set(j,k+a6-1,'└')r.set(j+a5-1,k+a6-1,'┘')end;if K<=a.static.RENDER_INSETS then r.setBackground(g.colorBackground)r.fill(j+1,k+1,1,a4,' ')r.fill(j+a3+2,k+1,1,a4,' ')end;if K<=a.static.RENDER_CONTENT then local a1=g.columns;local o=g.textTable;r.setBackground(g.colorBackground)r.fill(j+2,k+1,a3,a4,' ')for w=1,#o do local a7=g.selectedLine==w and g.colorSelected or g.colorContent;local a2=o[w]local i=a2==nil and''or tostring(a2)if g.selectedLine==w then g:refreshLine(w)else r.setForeground(a7)r.set(j+2,k+w,b.sub(i,1,a1))end end end;r.setBackground(s)r.setForeground(t)return true else error("[XAF Error] Component GPU renderer has not been initialized")end end;return{private=g,public=h}end;function e:extend()local a8=self:initialize()local g=a8.private;local h=a8.public;if self.C_INHERIT==true then return{private=g,public=h}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function e:new(a9,aa,a3,a4)local a8=self:initialize()local g=a8.private;local h=a8.public;h:setPosition(a9,aa)assert(type(a3)=="number","[XAF Graphic] Expected NUMBER as argument #3")if d:checkNatural(a3,true)==true then g.columns=a3;g.totalWidth=a3+4 else error("[XAF Error] Invalid columns number - must be a positive integer")end;assert(type(a4)=="number","[XAF Graphic] Expected NUMBER as argument #4")if d:checkNatural(a4,true)==true then g.rows=a4;g.totalHeight=a4+2;h:setText({})else error("[XAF Error] Invalid rows number - must be a positive integer")end;if self.C_INSTANCE==true then return h else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return e
