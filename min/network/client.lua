local a=require("event")local b=require("xaf/core/xafcore")local c=b:getSecurityInstance()local d={C_NAME="Abstract Network Client",C_INSTANCE=false,C_INHERIT=true,static={TIMEOUT_DEFAULT=10}}function d:initialize()local e=nil;local f=e and e.private or{}local g=e and e.public or{}f.componentModem=nil;f.targetAddress=''f.targetPort=1;f.timeout=10;f.sendRawRequest=function(self,h,...)assert(type(h)=="string","[XAF Network] Expected STRING as argument #1")local i=f.componentModem;local j=h;local k={...}local l=f.targetAddress;local m=f.targetPort;local n=f.timeout;if i then i.open(m)i.send(l,m,j,table.unpack(k))local o={a.pull(n,"modem_message")}i.close(m)local p=#o;local q=o[1]local r=o[2]local s=o[3]local t=o[4]local u=o[5]local v={}for w=7,p do table.insert(v,o[w])end;if q then if l==s and m==t then if r==i.address then local x=o[6]local y=v;return x,table.unpack(y)end end else return false,"Response Timeout"end else error("[XAF Error] Client network modem component has not been initialized")end end;g.getModem=function(self)return f.componentModem end;g.getTargetAddress=function(self)return f.targetAddress end;g.getTargetPort=function(self)return f.targetPort end;g.getTimeout=function(self)return f.timeout end;g.setModem=function(self,i)assert(type(i)=="table","[XAF Network] Expected TABLE as argument #1")if i.type=="modem"then f.componentModem=i else error("[XAF Error] Invalid network modem component")end;return true end;g.setTargetAddress=function(self,z)assert(type(z)=="string","[XAF Network] Expected STRING as argument #1")if c:isUuid(z)==true then f.targetAddress=z else error("[XAF Error] Invalid target address")end;return true end;g.setTargetPort=function(self,A)assert(type(A)=="number","[XAF Network] Expected NUMBER as argument #1")if A>=1 and A<=65535 then f.targetPort=A else error("[XAF Error] Invalid port number - must be a positive integer up to 65535")end;return true end;g.setTimeout=function(self,n)assert(type(n)=="number","[XAF Network] Expected NUMBER as argument #1")if n==-1 then f.timeout=math.huge else f.timeout=n end;return true end;return{private=f,public=g}end;function d:extend()local B=self:initialize()local f=B.private;local g=B.public;if self.C_INHERIT==true then return{private=f,public=g}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function d:new()local B=self:initialize()local f=B.private;local g=B.public;if self.C_INSTANCE==true then return g else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return d
