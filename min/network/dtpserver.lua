local a=require("filesystem")local b=require("xaf/network/server")local c=require("xaf/core/xafcore")local d=c:getStringInstance()local e=c:getTableInstance()local f=c:getTextInstance()local g={C_NAME="Generic DTP Server",C_INSTANCE=true,C_INHERIT=true,static={}}function g:initialize()local h=b:extend()local i=h and h.private or{}local j=h and h.public or{}i.serverPaths={}i.serverPaths["dtp_root"]='/'i.serverPaths["dtp_database"]="DTP_DATABASE"i.doDataGet=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local o=a.canonical(k[8])local p=k[9]local q=a.concat(i.serverPaths["dtp_database"],o)if a.exists(q)==false then l.send(n,m,false,"Table Not Exists")elseif a.isDirectory(q)==true then l.send(n,m,false,"Invalid Table File")elseif p==nil then l.send(n,m,false,"Nil Data Key")else local r=e:loadFromFile(q)local s=r[p]l.send(n,m,true,"OK",s)end end;i.doDataSet=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local o=a.canonical(k[8])local p=k[9]local t=k[10]local q=a.concat(i.serverPaths["dtp_database"],o)if a.exists(q)==false then l.send(n,m,false,"Table Not Exists")elseif a.isDirectory(q)==true then l.send(n,m,false,"Invalid Table File")elseif p==nil then l.send(n,m,false,"Nil Data Key")else local r=e:loadFromFile(q)r[p]=t;e:saveToFile(r,q,false)l.send(n,m,true,"OK")end end;i.doDirectoryCreate=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local u=a.canonical(k[8])local v=k[9]local w=a.concat(i.serverPaths["dtp_database"],u)local x=a.concat(w,v)if a.exists(w)==false then l.send(n,m,false,"Path Not Exists")elseif a.exists(x)==true then l.send(n,m,false,"Directory Already Exists")elseif a.isDirectory(w)==false then l.send(n,m,false,"Path Is Not A Directory")elseif v==nil or d:checkControlCharacter(v)==true or d:checkSpecialCharacter(v)==true or d:checkWhitespace(v)==true then l.send(n,m,false,"Invalid Directory Name")else a.makeDirectory(x)l.send(n,m,true,"OK")end end;i.doObjectMove=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local y=a.canonical(k[8])local z=a.canonical(k[9])local A=a.concat(i.serverPaths["dtp_database"],y)local B=a.concat(i.serverPaths["dtp_database"],z)if a.exists(A)==false then l.send(n,m,false,"Object Not Exists")elseif a.exists(B)==false then l.send(n,m,false,"Path Not Exists")elseif a.isDirectory(B)==false then l.send(n,m,false,"Path Is Not A Directory")elseif y==''or y=='/'then l.send(n,m,false,"Access Denied")else local C=f:split(A,'/',true)local D=#C;local E=C[D]local F=a.concat(B,E)a.rename(A,F)l.send(n,m,true,"OK")end end;i.doObjectRemove=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local G=a.canonical(k[8])local H=a.concat(i.serverPaths["dtp_database"],G)if a.exists(H)==false then l.send(n,m,false,"Object Not Exists")elseif G==''or G=='/'then l.send(n,m,false,"Access Denied")else a.remove(H)l.send(n,m,true,"OK")end end;i.doObjectRename=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local G=a.canonical(k[8])local I=k[9]local H=a.concat(i.serverPaths["dtp_database"],G)if a.exists(H)==false then l.send(n,m,false,"Object Not Exists")elseif G==''or G=='/'then l.send(n,m,false,"Access Denied")elseif I==nil or d:checkControlCharacter(I)==true or d:checkSpecialCharacter(I)==true or d:checkWhitespace(I)==true then l.send(n,m,false,"Invalid Object New Name")else local C=f:split(H,'/',true)local D=#C;local F=''for J=1,D-1 do F=F..C[J]F=F..'/'end;F=F..I;if a.exists(F)==true then l.send(n,m,false,"New Name Already Occupied")else a.rename(H,F)l.send(n,m,true,"OK")end end end;i.doTableCreate=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local u=a.canonical(k[8])local K=k[9]local w=a.concat(i.serverPaths["dtp_database"],u)local q=a.concat(w,K)if a.exists(w)==false then l.send(n,m,false,"Directory Not Exists")elseif a.exists(q)==true then l.send(n,m,false,"Table Already Exists")elseif K==nil or d:checkControlCharacter(K)==true or d:checkSpecialCharacter(K)==true or d:checkWhitespace(K)==true then l.send(n,m,false,"Invalid Table Name")else a.open(q,'w'):close()l.send(n,m,true,"OK")end end;i.prepareWorkspace=function(self,L)assert(type(L)=="string","[XAF Network] Expected STRING as argument #1")i.serverPaths["dtp_root"]=L;i.serverPaths["dtp_database"]=a.concat(i.serverPaths["dtp_root"],i.serverPaths["dtp_database"])if a.exists(i.serverPaths["dtp_root"])==false then a.makeDirectory(i.serverPaths["dtp_root"])end;if a.exists(i.serverPaths["dtp_database"])==false then a.makeDirectory(i.serverPaths["dtp_database"])end;return true end;i.process=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local M=k[7]if M=="DTP_DATA_GET"then return true,i:doDataGet(k)elseif M=="DTP_DATA_SET"then return true,i:doDataSet(k)elseif M=="DTP_DIRECTORY_CREATE"then return true,i:doDirectoryCreate(k)elseif M=="DTP_OBJECT_MOVE"then return true,i:doObjectMove(k)elseif M=="DTP_OBJECT_REMOVE"then return true,i:doObjectRemove(k)elseif M=="DTP_OBJECT_RENAME"then return true,i:doObjectRename(k)elseif M=="DTP_TABLE_CREATE"then return true,i:doTableCreate(k)else return false end end;return{private=i,public=j}end;function g:extend()local N=self:initialize()local i=N.private;local j=N.public;if self.C_INHERIT==true then return{private=i,public=j}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function g:new(l,L)local N=self:initialize()local i=N.private;local j=N.public;j:setModem(l)assert(type(L)=="string","[XAF Network] Expected STRING as argument #2")i:prepareWorkspace(L)if self.C_INSTANCE==true then return j else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return g
