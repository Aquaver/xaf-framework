local a=require("xaf/network/client")local b=require("filesystem")local c=require("unicode")local d=require("xaf/core/xafcore")local e=d:getTextInstance()local f={C_NAME="Generic FTP Client",C_INSTANCE=true,C_INHERIT=true,static={}}function f:initialize()local g=a:extend()local h=g and g.private or{}local i=g and g.public or{}i.directoryCreate=function(self,j,k)assert(type(j)=="string","[XAF Network] Expected STRING as argument #1")assert(type(k)=="string","[XAF Network] Expected STRING as argument #2")local l=j;local m=k;return h:sendRawRequest("FTP_DIRECTORY_CREATE",l,m)end;i.directoryList=function(self,j)assert(type(j)=="string","[XAF Network] Expected STRING as argument #1")local l=j;local n={}local o={}local p,q,r,s=h:sendRawRequest("FTP_DIRECTORY_LIST",l)if p==false then return p,q else n=e:split(r,'/')o=e:split(s,'/')return p,q,n,o end end;i.fileDownload=function(self,t,u,v)assert(type(t)=="string","[XAF Network] Expected STRING as argument #1")assert(type(u)=="string","[XAF Network] Expected STRING as argument #2")assert(type(v)=="string","[XAF Network] Expected STRING as argument #3")local w=t;local x=u;local y=v;local z=b.concat(x,y)if b.exists(u)==false then error("[XAF Error] Directory '"..u.."' does not exist")elseif b.isDirectory(u)==false then error("[XAF Error] Path '"..u.."' is not a directory")elseif b.exists(z)==true then error("[XAF Error] File '"..z.."' already exists")else local A=b.open(z,'w')local p,q=h:sendRawRequest("FTP_FILE_DOWNLOAD_START",w)if p==true then local B=nil;local C=''local D=''repeat B,C,D=h:sendRawRequest("FTP_FILE_DOWNLOAD_CONTINUE",w)A:write(D)until C=="OK (Stop)"A:close()return B,C else A:close()b.remove(z)return p,q end end end;i.fileMove=function(self,E,j)assert(type(E)=="string","[XAF Network] Expected STRING as argument #1")assert(type(j)=="string","[XAF Network] Expected STRING as argument #2")local F=E;local G=j;return h:sendRawRequest("FTP_FILE_MOVE",F,G)end;i.fileRemove=function(self,j)assert(type(j)=="string","[XAF Network] Expected STRING as argument #1")local H=j;return h:sendRawRequest("FTP_FILE_REMOVE",H)end;i.fileRename=function(self,j,k)assert(type(j)=="string","[XAF Network] Expected STRING as argument #1")assert(type(k)=="string","[XAF Network] Expected STRING as argument #2")local H=j;local I=k;return h:sendRawRequest("FTP_FILE_RENAME",H,I)end;i.fileUpload=function(self,J,K,L)assert(type(J)=="string","[XAF Network] Expected STRING as argument #1")assert(type(K)=="string","[XAF Network] Expected STRING as argument #2")assert(type(L)=="string","[XAF Network] Expected STRING as argument #3")local M=J;local N=K;local O=L;if b.exists(M)==false then error("[XAF Error] File '"..M.."' does not exist")else local P={}local A=b.open(M,'r')local Q=''local R=''local S=33+c.wlen(N)+c.wlen(O)local T=h.componentModem.maxPacketSize()-S;local p,q=h:sendRawRequest("FTP_FILE_UPLOAD_START",N,O)if p==true then while Q do R=R..Q;Q=A:read(math.huge)end;for U=1,c.wlen(R),T do local V=U;local W=U+T-1;local X=string.sub(R,V,W)table.insert(P,X)end;while p==true and P[1]do local Y=P[1]local B,C=h:sendRawRequest("FTP_FILE_UPLOAD_CONTINUE",N,O,Y)if B==true then table.remove(P,1)else return B,C end end;A:close()return h:sendRawRequest("FTP_FILE_UPLOAD_STOP",N,O)else A:close()return p,q end end end;return{private=h,public=i}end;function f:extend()local Z=self:initialize()local h=Z.private;local i=Z.public;if self.C_INHERIT==true then return{private=h,public=i}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function f:new(_)local Z=self:initialize()local h=Z.private;local i=Z.public;i:setModem(_)if self.C_INSTANCE==true then return i else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return f
