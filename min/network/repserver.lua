local a=require("filesystem")local b=require("xaf/network/server")local c=require("shell")local d=require("unicode")local e=require("xaf/core/xafcore")local f=e:getExecutorInstance()local g={C_NAME="Generic REP Server",C_INSTANCE=true,C_INHERIT=true,static={}}function g:initialize()local h=b:extend()local i=h and h.private or{}local j=h and h.public or{}i.serverPaths={}i.serverPaths["rep_root"]='/'i.serverPaths["rep_scripts"]="REP_SCRIPTS"i.doExecute=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local o=a.canonical(k[8])local p=a.concat(i.serverPaths["rep_scripts"],o)local q=nil;local r=nil;local s=nil;if a.exists(p)==false then l.send(n,m,false,"Script Not Exists")elseif a.isDirectory(p)==true then l.send(n,m,false,"Invalid File")else q={}r={}for t=9,#k do table.insert(q,k[t])end;r={f:runExternal(p,table.unpack(q))}s=table.remove(r,1)if s==true then l.send(n,m,true,"OK",table.unpack(r))else l.send(n,m,false,"Script Execution Error")end end end;i.doExecuteAbsolute=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local o=a.canonical(k[8])local q=nil;local r=nil;local s=nil;if a.exists(o)==false then l.send(n,m,false,"Script Not Exists")elseif a.isDirectory(o)==true then l.send(n,m,false,"Invalid File")else q={}r={}for t=9,#k do table.insert(q,k[t])end;r={f:runExternal(o,table.unpack(q))}s=table.remove(r,1)if s==true then l.send(n,m,true,"OK",table.unpack(r))else l.send(n,m,false,"Script Execution Error")end end end;i.doExecuteCommand=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local u=k[8]local q=nil;local v=u;local p=a.concat("bin",u..".lua")if a.exists(p)==false then l.send(n,m,false,"Script Not Exists")elseif a.isDirectory(p)==true then l.send(n,m,false,"Invalid File")else for t=9,#k do v=v..' '..tostring(k[t])end;c.execute(v)l.send(n,m,true,"OK")end end;i.doExecuteNoProtect=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local o=a.canonical(k[8])local p=a.concat(i.serverPaths["rep_scripts"],o)local q=nil;local r=nil;if a.exists(p)==false then l.send(n,m,false,"Script Not Exists")elseif a.isDirectory(p)==true then l.send(n,m,false,"Invalid File")else local w=a.open(p,'r')local x=''local y=w:read(math.huge)local z=nil;q={}r={}while y do x=x..y;y=w:read(math.huge)end;for t=9,#k do table.insert(q,k[t])end;w:close()z=load(x)r={z(table.unpack(q))}l.send(n,m,true,"OK",table.unpack(r))end end;i.doExecuteNoReturn=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local o=a.canonical(k[8])local p=a.concat(i.serverPaths["rep_scripts"],o)local q=nil;local r=nil;local s=nil;if a.exists(p)==false then l.send(n,m,false,"Script Not Exists")elseif a.isDirectory(p)==true then l.send(n,m,false,"Invalid File")else q={}r={}for t=9,#k do table.insert(q,k[t])end;r={f:runExternal(p,table.unpack(q))}s=table.remove(r,1)if s==true then l.send(n,m,true,"OK")else l.send(n,m,false,"Script Executor Error")end end end;i.doScriptList=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local n=k[3]local o=i.serverPaths["rep_scripts"]local A=string.char(0)local y=''function getList(B,C)for D in a.list(B)do local E=a.concat(B,D)local F={}if a.isDirectory(E)==true then getList(E,C+1)else F=a.segments(E)y=''for t=1,C do y=y..F[#F-C+t]..'/'end;y=string.sub(y,1,d.wlen(y)-1)A=A..y..string.char(0)end end end;getList(o,1)l.send(n,m,true,"OK",A)end;i.prepareWorkspace=function(self,G)assert(type(G)=="string","[XAF Network] Expected STRING as argument #1")i.serverPaths["rep_root"]=G;i.serverPaths["rep_scripts"]=a.concat(i.serverPaths["rep_root"],i.serverPaths["rep_scripts"])if a.exists(i.serverPaths["rep_root"])==false then a.makeDirectory(i.serverPaths["rep_root"])end;if a.exists(i.serverPaths["rep_scripts"])==false then a.makeDirectory(i.serverPaths["rep_scripts"])end;return true end;j.process=function(self,k)assert(type(k)=="table","[XAF Network] Expected TABLE as argument #1")local l=i.componentModem;local m=i.port;local H=l.address;if i.active==true then if l then if k[1]=="modem_message"then if k[2]==H and k[4]==m then local I=k[6]local J=_G._XAF._VERSION;local n=k[3]local K=k[4]local L=k[7]if I==J then if L=="REP_EXECUTE"then return true,i:doExecute(k)elseif L=="REP_EXECUTE_ABSOLUTE"then return true,i:doExecuteAbsolute(k)elseif L=="REP_EXECUTE_COMMAND"then return true,i:doExecuteCommand(k)elseif L=="REP_EXECUTE_NO_PROTECT"then return true,i:doExecuteNoProtect(k)elseif L=="REP_EXECUTE_NO_RETURN"then return true,i:doExecuteNoReturn(k)elseif L=="REP_SCRIPT_LIST"then return true,i:doScriptList(k)end else l.send(n,K,false,"XAF Version Mismatch")end;return false end end else error("[XAF Error] Server network modem component has not been initialized")end else error("[XAF Error] Server is already stopped")end end;return{private=i,public=j}end;function g:extend()local M=self:initialize()local i=M.private;local j=M.public;if self.C_INHERIT==true then return{private=i,public=j}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function g:new(l,G)local M=self:initialize()local i=M.private;local j=M.public;j:setModem(l)assert(type(G)=="string","[XAF Network] Expected STRING as argument #2")i:prepareWorkspace(G)if self.C_INSTANCE==true then return j else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return g
