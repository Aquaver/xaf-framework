local a=require("unicode")local b=require("core/xafcore")local c=b:getTextInstance()local d={C_NAME="Generic HTTP Stream",C_INSTANCE=true,C_INHERIT=true,static={}}function d:initialize()local e=nil;local f=e and e.private or{}local g=e and e.public or{}f.componentInternet=nil;f.connectionHandle=nil;f.isConnected=false;f.isSecure=false;f.maxTimeout=1;f.maxTries=3;f.postData=nil;f.requestHeaders={}f.responseCode=0;f.responseHeaders={}f.responseMessage=''f.targetUrl=''g.clearPostData=function(self)f.postData=nil;return true end;g.connect=function(self)local h=nil;local i=f.componentInternet;local j=f.postData;local k=f.requestHeaders;local l={}local m=false;local n=f.targetUrl;local o=f.maxTimeout;local p=f.maxTries;if j then h=i.request(n,j,k)else h=i.request(n,k)end;if f.isConnected==false then for q=1,p do l={h.response()}if l[1]and l[2]and l[3]then f.connectionHandle=h;f.isConnected=true;f.responseCode=l[1]f.responseMessage=l[2]f.responseHeaders=l[3]m=true;return m else os.sleep(o)end end;return m else error("[XAF Error] Already connected")end end;g.disconnect=function(self)if f.isConnected==true then f.connectionHandle.close()f.connectionHandle=nil;f.isConnected=false;return true else error("[XAF Error] Already disconnected")end end;g.isConnected=function(self)return f.isConnected end;g.isSecure=function(self)return f.isSecure end;g.getCard=function(self)return f.componentInternet end;g.getData=function(self)if f.isConnected==true then local h=f.connectionHandle;local r=''return function()while r do r=h.read(math.huge)return r end end else error("[XAF Error] Not connected")end end;g.getDateObject=function(self)if f.isConnected==true then local s=f.responseHeaders["Date"][1]local t={}local u=c:split(s," ,:")local v={["Mon"]=1,["Tue"]=2,["Wed"]=3,["Thu"]=4,["Fri"]=5,["Sat"]=6,["Sun"]=7}local w={["Jan"]=1,["Feb"]=2,["Mar"]=3,["Apr"]=4,["May"]=5,["Jun"]=6,["Jul"]=7,["Aug"]=8,["Sep"]=9,["Oct"]=10,["Nov"]=11,["Dec"]=12}t["WEEK_DAY"]=v[u[1]]t["MONTH_DAY"]=tonumber(u[2])t["MONTH"]=w[u[3]]t["YEAR"]=tonumber(u[4])t["TIME_HOUR"]=tonumber(u[5])t["TIME_MINUTE"]=tonumber(u[6])t["TIME_SECOND"]=tonumber(u[7])t["TIMEZONE"]=u[8]return t else error("[XAF Error] Not connected")end end;g.getMaxTimeout=function(self)return f.maxTimeout end;g.getMaxTries=function(self)return f.maxTries end;g.getResponseCode=function(self)if f.isConnected==true then return f.responseCode else error("[XAF Error] Not connected")end end;g.getResponseHeader=function(self,x)assert(type(x)=="string","[XAF Utility] Expected STRING as argument #1")if f.isConnected==true then if f.responseHeaders[x]then return f.responseHeaders[x][1]else return nil end else error("[XAF Error] Not connected")end end;g.getResponseHeaders=function(self)if f.isConnected==true then return f.responseHeaders else error("[XAF Error] Not connected")end end;g.getResponseMessage=function(self)if f.isConnected==true then return f.responseMessage else error("[XAF Error] Not connected")end end;g.setCard=function(self,i)assert(type(i)=="table","[XAF Utility] Expected TABLE as argument #1")if i.type=="internet"then f.componentInternet=i else error("[XAF Error] Invalid internet card component")end;return true end;g.setMaxTimeout=function(self,y)assert(type(y)=="number","[XAF Utility] Expected NUMBER as argument #1")f.maxTimeout=y;return true end;g.setMaxTries=function(self,z)assert(type(z)=="number","[XAF Utility] Expected NUMBER as argument #1")if math.ceil(z)==z and math.floor(z)==z and z>0 then f.maxTries=z else error("[XAF Error] Invalid connection tries number - must be a positive integer")end;return true end;g.setPostData=function(self,j)assert(type(j)=="table","[XAF Utility] Expected TABLE as argument #1")local A=j;local B=''for C,D in pairs(A)do B=B..tostring(C)..'='B=B..tostring(D)..'&'end;B=a.sub(B,1,a.wlen(B)-1)f.postData=B;return true end;g.setRequestHeader=function(self,E,D)assert(type(E)=="string","[XAF Utility] Expected STRING as argument #1")local x=E;local F=D;f.requestHeaders[x]=F;return true end;return{private=f,public=g}end;function d:extend()local G=self:initialize()local f=G.private;local g=G.public;if self.C_INHERIT==true then return{private=f,public=g}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function d:new(H,I)local G=self:initialize()local f=G.private;local g=G.public;g:setCard(H)assert(type(I)=="string","[XAF Utility] Expected STRING as argument #2")if string.sub(string.lower(I),1,7)=="http://"then f.targetUrl=I;f.isSecure=false elseif string.sub(string.lower(I),1,8)=="https://"then f.targetUrl=I;f.isSecure=true else error("[XAF Error] Invalid URL pattern - should start with 'http(s)://...'")end;if self.C_INSTANCE==true then return g else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return d
