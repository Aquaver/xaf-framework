local a=require("unicode")local b=require("xaf/core/xafcore")local c=b:getMathInstance()local d=b:getTextInstance()local e={C_NAME="Generic HTTP Stream",C_INSTANCE=true,C_INHERIT=true,static={}}function e:initialize()local f=nil;local g=f and f.private or{}local h=f and f.public or{}g.componentInternet=nil;g.connectionHandle=nil;g.isConnected=false;g.isSecure=false;g.maxTimeout=1;g.maxTries=3;g.postData=nil;g.requestHeaders={}g.responseCode=0;g.responseHeaders={}g.responseMessage=''g.targetUrl=''h.clearPostData=function(self)g.postData=nil;return true end;h.connect=function(self)local i=nil;local j=g.componentInternet;local k=g.postData;local l=g.requestHeaders;local m={}local n=false;local o=g.targetUrl;local p=g.maxTimeout;local q=g.maxTries;if k then i=j.request(o,k,l)else i=j.request(o,nil,l)end;if g.isConnected==false then for r=1,q do m={i.response()}if m[1]and m[2]and m[3]then g.connectionHandle=i;g.isConnected=true;g.responseCode=m[1]g.responseMessage=m[2]g.responseHeaders=m[3]n=true;return n else os.sleep(p)end end;return n else error("[XAF Error] Already connected")end end;h.disconnect=function(self)if g.isConnected==true then g.connectionHandle.close()g.connectionHandle=nil;g.isConnected=false;return true else error("[XAF Error] Already disconnected")end end;h.isConnected=function(self)return g.isConnected end;h.isSecure=function(self)return g.isSecure end;h.getCard=function(self)return g.componentInternet end;h.getData=function(self)if g.isConnected==true then local i=g.connectionHandle;local s=''return function()while s do s=i.read(math.huge)return s end end else error("[XAF Error] Not connected")end end;h.getDateObject=function(self)if g.isConnected==true then local t=g.responseHeaders["Date"][1]local u={}local v=d:split(t," ,:")local w={["Mon"]=1,["Tue"]=2,["Wed"]=3,["Thu"]=4,["Fri"]=5,["Sat"]=6,["Sun"]=7}local x={["Jan"]=1,["Feb"]=2,["Mar"]=3,["Apr"]=4,["May"]=5,["Jun"]=6,["Jul"]=7,["Aug"]=8,["Sep"]=9,["Oct"]=10,["Nov"]=11,["Dec"]=12}u["WEEK_DAY"]=w[v[1]]u["MONTH_DAY"]=tonumber(v[2])u["MONTH"]=x[v[3]]u["YEAR"]=tonumber(v[4])u["TIME_HOUR"]=tonumber(v[5])u["TIME_MINUTE"]=tonumber(v[6])u["TIME_SECOND"]=tonumber(v[7])u["TIMEZONE"]=v[8]return u else error("[XAF Error] Not connected")end end;h.getMaxTimeout=function(self)return g.maxTimeout end;h.getMaxTries=function(self)return g.maxTries end;h.getResponseCode=function(self)if g.isConnected==true then return g.responseCode else error("[XAF Error] Not connected")end end;h.getResponseHeader=function(self,y)assert(type(y)=="string","[XAF Utility] Expected STRING as argument #1")if g.isConnected==true then if g.responseHeaders[y]then return g.responseHeaders[y][1]else return nil end else error("[XAF Error] Not connected")end end;h.getResponseHeaders=function(self)if g.isConnected==true then return g.responseHeaders else error("[XAF Error] Not connected")end end;h.getResponseMessage=function(self)if g.isConnected==true then return g.responseMessage else error("[XAF Error] Not connected")end end;h.setCard=function(self,j)assert(type(j)=="table","[XAF Utility] Expected TABLE as argument #1")if j.type=="internet"then g.componentInternet=j else error("[XAF Error] Invalid internet card component")end;return true end;h.setMaxTimeout=function(self,z)assert(type(z)=="number","[XAF Utility] Expected NUMBER as argument #1")g.maxTimeout=z;return true end;h.setMaxTries=function(self,A)assert(type(A)=="number","[XAF Utility] Expected NUMBER as argument #1")if c:checkNatural(A,true)==true then g.maxTries=A else error("[XAF Error] Invalid connection tries number - must be a positive integer")end;return true end;h.setPostData=function(self,k)assert(type(k)=="table","[XAF Utility] Expected TABLE as argument #1")local B=k;local C=''for D,E in pairs(B)do C=C..tostring(D)..'='C=C..tostring(E)..'&'end;C=a.sub(C,1,a.wlen(C)-1)g.postData=C;return true end;h.setRequestHeader=function(self,F,E)assert(type(F)=="string","[XAF Utility] Expected STRING as argument #1")local y=F;local G=E;g.requestHeaders[y]=G;return true end;return{private=g,public=h}end;function e:extend()local H=self:initialize()local g=H.private;local h=H.public;if self.C_INHERIT==true then return{private=g,public=h}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function e:new(I,J)local H=self:initialize()local g=H.private;local h=H.public;h:setCard(I)assert(type(J)=="string","[XAF Utility] Expected STRING as argument #2")if string.sub(string.lower(J),1,7)=="http://"then g.targetUrl=J;g.isSecure=false elseif string.sub(string.lower(J),1,8)=="https://"then g.targetUrl=J;g.isSecure=true else error("[XAF Error] Invalid URL pattern - should start with 'http(s)://...'")end;if self.C_INSTANCE==true then return h else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return e
