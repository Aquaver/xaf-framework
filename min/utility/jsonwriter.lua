local a=require("unicode")local b=require("xaf/core/xafcore")local c=b:getMathInstance()local d=b:getTableInstance()local e={C_NAME="Generic JSON Writer",C_INSTANCE=true,C_INHERIT=true,static={}}function e:initialize()local f=nil;local g=f and f.private or{}local h=f and f.public or{}g.currentIndent=0;g.indentSize=0;g.inputData=nil;g.stringEscapes={['\b']="\\b",['\n']="\\n",['\t']="\\t",['\r']="\\r",['\f']="\\f",['\"']='\\"',["\\"]="\\\\"}g.checkDataType=function(self,i)if type(i)=="boolean"or type(i)=="nil"or type(i)=="number"or type(i)=="string"then return type(i)elseif type(i)=="table"then if#i>=d:getLength(i)then return"array"else return"object"end else return nil end end;g.getValue=function(self,j,k,l)assert(type(j)=="string","[XAF Core] Expected STRING as argument #1")assert(type(l)=="string","[XAF Core] Expected STRING as argument #3")local m=k;local n=g:checkDataType(m)if n=="array"then j=j..g:writeArray(m)elseif n=="boolean"then j=j..g:writeBoolean(m)elseif n=="nil"then j=j..g:writeNull(m)elseif n=="number"then j=j..g:writeNumber(m)elseif n=="object"then j=j..g:writeObject(m)elseif n=="string"then j=j..g:writeString(m)else error("[XAF Error] Invalid data type occured while writing JSON - parsing "..l)end;return j end;g.removeWhitespaces=function(self,o)local p=''local q=''local r=false;local s=a.wlen(o)local t=''for u=1,s do p=string.sub(o,u,u)if p=='\"'then if q=="\\"then t=t..q..p else r=not r;t=t..p end elseif string.find(p,"%s")then if r==true then t=t..p end else t=t..p end;q=p end;return t end;g.writeArray=function(self,v)assert(type(v)=="table","[XAF Core] Expected TABLE as argument #1")local w=''w=w..'['..'\n'g.currentIndent=g.currentIndent+g.indentSize;for u=1,#v do w=w..string.rep(' ',g.currentIndent)w=g:getValue(w,v[u],"array",true)w=w..','..'\n'end;if#v>0 then w=string.sub(w,1,-3)end;g.currentIndent=g.currentIndent-g.indentSize;w=w..'\n'..string.rep(' ',g.currentIndent)..']'return w end;g.writeBoolean=function(self,x)assert(type(x)=="boolean","[XAF Core] Expected BOOLEAN as argument #1")return tostring(x)end;g.writeNull=function(self,y)assert(type(y)=="nil","[XAF Core] Expected NIL as argument #1")return"null"end;g.writeNumber=function(self,z)assert(type(z)=="number","[XAF Core] Expected NUMBER as argument #1")if z==math.huge or z==-math.huge or z~=z then return"null"end;return tostring(z)end;g.writeObject=function(self,A)assert(type(A)=="table","[XAF Core] Expected TABLE as argument #1")local B=''B=B..'{'..'\n'g.currentIndent=g.currentIndent+g.indentSize;for C,D in d:sortByKey(A,false)do if type(C)=="string"then B=B..string.rep(' ',g.currentIndent)B=B..g:writeString(C)B=B..": "B=g:getValue(B,D,"object")B=B..','..'\n'else error("[XAF Error] Object key type must be string - detected type: "..type(C))end end;g.currentIndent=g.currentIndent-g.indentSize;B=string.sub(B,1,-3)B=B..'\n'..string.rep(' ',g.currentIndent)..'}'return B end;g.writeString=function(self,E)assert(type(E)=="string","[XAF Core] Expected STRING as argument #1")for F,G in pairs(g.stringEscapes)do E=E:gsub(F,G)end;return'\"'..tostring(E)..'\"'end;h.write=function(self,H,I)assert(type(I)=="boolean","[XAF Core] Expected BOOLEAN as argument #2")local o=''o=g:getValue(o,H,"entire JSON",false)o=I==true and g:removeWhitespaces(o)or o;return o end;return{private=g,public=h}end;function e:extend()local J=self:initialize()local g=J.private;local h=J.public;if self.C_INHERIT==true then return{private=g,public=h}else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be inherited")end end;function e:new(K)local J=self:initialize()local g=J.private;local h=J.public;if c:checkNatural(K,false)==true then g.indentSize=K else error("[XAF Error] Default string indentation size must be natural number (including zero)")end;if self.C_INSTANCE==true then return h else error("[XAF Error] Class '"..tostring(self.C_NAME).."' cannot be instanced")end end;return e
